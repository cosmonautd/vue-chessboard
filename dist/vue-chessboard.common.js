(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["VueChessboard"] = factory();
	else
		root["VueChessboard"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 21);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar cg = __webpack_require__(3);\nexports.colors = ['white', 'black'];\nexports.invRanks = [8, 7, 6, 5, 4, 3, 2, 1];\nexports.allKeys = (_a = Array.prototype).concat.apply(_a, cg.files.map(function (c) {\n    return cg.ranks.map(function (r) {\n        return c + r;\n    });\n}));\nexports.pos2key = function (pos) {\n    return exports.allKeys[8 * pos[0] + pos[1] - 9];\n};\nexports.key2pos = function (k) {\n    return [k.charCodeAt(0) - 96, k.charCodeAt(1) - 48];\n};\nfunction memo(f) {\n    var v;\n    var ret = function ret() {\n        if (v === undefined) v = f();\n        return v;\n    };\n    ret.clear = function () {\n        v = undefined;\n    };\n    return ret;\n}\nexports.memo = memo;\nexports.timer = function () {\n    var startAt;\n    return {\n        start: function start() {\n            startAt = Date.now();\n        },\n        cancel: function cancel() {\n            startAt = undefined;\n        },\n        stop: function stop() {\n            if (!startAt) return 0;\n            var time = Date.now() - startAt;\n            startAt = undefined;\n            return time;\n        }\n    };\n};\nexports.opposite = function (c) {\n    return c === 'white' ? 'black' : 'white';\n};\nfunction containsX(xs, x) {\n    return xs !== undefined && xs.indexOf(x) !== -1;\n}\nexports.containsX = containsX;\nexports.distanceSq = function (pos1, pos2) {\n    return Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2);\n};\nexports.samePiece = function (p1, p2) {\n    return p1.role === p2.role && p1.color === p2.color;\n};\nexports.computeIsTrident = function () {\n    return window.navigator.userAgent.indexOf('Trident/') > -1;\n};\nvar posToTranslateBase = function posToTranslateBase(pos, asWhite, xFactor, yFactor) {\n    return [(asWhite ? pos[0] - 1 : 8 - pos[0]) * xFactor, (asWhite ? 8 - pos[1] : pos[1] - 1) * yFactor];\n};\nexports.posToTranslateAbs = function (bounds) {\n    var xFactor = bounds.width / 8,\n        yFactor = bounds.height / 8;\n    return function (pos, asWhite) {\n        return posToTranslateBase(pos, asWhite, xFactor, yFactor);\n    };\n};\nexports.posToTranslateRel = function (pos, asWhite) {\n    return posToTranslateBase(pos, asWhite, 12.5, 12.5);\n};\nexports.translateAbs = function (el, pos) {\n    el.style.transform = \"translate(\" + pos[0] + \"px,\" + pos[1] + \"px)\";\n};\nexports.translateRel = function (el, percents) {\n    el.style.left = percents[0] + '%';\n    el.style.top = percents[1] + '%';\n};\nexports.setVisible = function (el, v) {\n    el.style.visibility = v ? 'visible' : 'hidden';\n};\nexports.eventPosition = function (e) {\n    if (e.clientX || e.clientX === 0) return [e.clientX, e.clientY];\n    if (e.touches && e.targetTouches[0]) return [e.targetTouches[0].clientX, e.targetTouches[0].clientY];\n    return undefined;\n};\nexports.isRightButton = function (e) {\n    return e.buttons === 2 || e.button === 2;\n};\nexports.createEl = function (tagName, className) {\n    var el = document.createElement(tagName);\n    if (className) el.className = className;\n    return el;\n};\nexports.raf = (window.requestAnimationFrame || window.setTimeout).bind(window);\nvar _a;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = __webpack_require__(0);\nvar premove_1 = __webpack_require__(16);\nfunction callUserFunction(f) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    if (f) setTimeout(function () {\n        return f.apply(void 0, args);\n    }, 1);\n}\nexports.callUserFunction = callUserFunction;\nfunction toggleOrientation(state) {\n    state.orientation = util_1.opposite(state.orientation);\n    state.animation.current = state.draggable.current = state.selected = undefined;\n}\nexports.toggleOrientation = toggleOrientation;\nfunction reset(state) {\n    state.lastMove = undefined;\n    unselect(state);\n    unsetPremove(state);\n    unsetPredrop(state);\n}\nexports.reset = reset;\nfunction setPieces(state, pieces) {\n    for (var key in pieces) {\n        var piece = pieces[key];\n        if (piece) state.pieces[key] = piece;else delete state.pieces[key];\n    }\n}\nexports.setPieces = setPieces;\nfunction setCheck(state, color) {\n    if (color === true) color = state.turnColor;\n    if (!color) state.check = undefined;else for (var k in state.pieces) {\n        if (state.pieces[k].role === 'king' && state.pieces[k].color === color) {\n            state.check = k;\n        }\n    }\n}\nexports.setCheck = setCheck;\nfunction setPremove(state, orig, dest, meta) {\n    unsetPredrop(state);\n    state.premovable.current = [orig, dest];\n    callUserFunction(state.premovable.events.set, orig, dest, meta);\n}\nfunction unsetPremove(state) {\n    if (state.premovable.current) {\n        state.premovable.current = undefined;\n        callUserFunction(state.premovable.events.unset);\n    }\n}\nexports.unsetPremove = unsetPremove;\nfunction setPredrop(state, role, key) {\n    unsetPremove(state);\n    state.predroppable.current = {\n        role: role,\n        key: key\n    };\n    callUserFunction(state.predroppable.events.set, role, key);\n}\nfunction unsetPredrop(state) {\n    var pd = state.predroppable;\n    if (pd.current) {\n        pd.current = undefined;\n        callUserFunction(pd.events.unset);\n    }\n}\nexports.unsetPredrop = unsetPredrop;\nfunction tryAutoCastle(state, orig, dest) {\n    if (!state.autoCastle) return false;\n    var king = state.pieces[orig];\n    if (king.role !== 'king') return false;\n    var origPos = util_1.key2pos(orig);\n    if (origPos[0] !== 5) return false;\n    if (origPos[1] !== 1 && origPos[1] !== 8) return false;\n    var destPos = util_1.key2pos(dest);\n    var oldRookPos, newRookPos, newKingPos;\n    if (destPos[0] === 7 || destPos[0] === 8) {\n        oldRookPos = util_1.pos2key([8, origPos[1]]);\n        newRookPos = util_1.pos2key([6, origPos[1]]);\n        newKingPos = util_1.pos2key([7, origPos[1]]);\n    } else if (destPos[0] === 3 || destPos[0] === 1) {\n        oldRookPos = util_1.pos2key([1, origPos[1]]);\n        newRookPos = util_1.pos2key([4, origPos[1]]);\n        newKingPos = util_1.pos2key([3, origPos[1]]);\n    } else return false;\n    var rook = state.pieces[oldRookPos];\n    if (rook.role !== 'rook') return false;\n    delete state.pieces[orig];\n    delete state.pieces[oldRookPos];\n    state.pieces[newKingPos] = king;\n    state.pieces[newRookPos] = rook;\n    return true;\n}\nfunction baseMove(state, orig, dest) {\n    if (orig === dest || !state.pieces[orig]) return false;\n    var captured = state.pieces[dest] && state.pieces[dest].color !== state.pieces[orig].color ? state.pieces[dest] : undefined;\n    if (dest == state.selected) unselect(state);\n    callUserFunction(state.events.move, orig, dest, captured);\n    if (!tryAutoCastle(state, orig, dest)) {\n        state.pieces[dest] = state.pieces[orig];\n        delete state.pieces[orig];\n    }\n    state.lastMove = [orig, dest];\n    state.check = undefined;\n    callUserFunction(state.events.change);\n    return captured || true;\n}\nexports.baseMove = baseMove;\nfunction baseNewPiece(state, piece, key, force) {\n    if (state.pieces[key]) {\n        if (force) delete state.pieces[key];else return false;\n    }\n    callUserFunction(state.events.dropNewPiece, piece, key);\n    state.pieces[key] = piece;\n    state.lastMove = [key];\n    state.check = undefined;\n    callUserFunction(state.events.change);\n    state.movable.dests = undefined;\n    state.turnColor = util_1.opposite(state.turnColor);\n    return true;\n}\nexports.baseNewPiece = baseNewPiece;\nfunction baseUserMove(state, orig, dest) {\n    var result = baseMove(state, orig, dest);\n    if (result) {\n        state.movable.dests = undefined;\n        state.turnColor = util_1.opposite(state.turnColor);\n        state.animation.current = undefined;\n    }\n    return result;\n}\nfunction userMove(state, orig, dest) {\n    if (canMove(state, orig, dest)) {\n        var result = baseUserMove(state, orig, dest);\n        if (result) {\n            var holdTime = state.hold.stop();\n            unselect(state);\n            var metadata = {\n                premove: false,\n                ctrlKey: state.stats.ctrlKey,\n                holdTime: holdTime\n            };\n            if (result !== true) metadata.captured = result;\n            callUserFunction(state.movable.events.after, orig, dest, metadata);\n            return true;\n        }\n    } else if (canPremove(state, orig, dest)) {\n        setPremove(state, orig, dest, {\n            ctrlKey: state.stats.ctrlKey\n        });\n        unselect(state);\n    } else if (isMovable(state, dest) || isPremovable(state, dest)) {\n        setSelected(state, dest);\n        state.hold.start();\n    } else unselect(state);\n    return false;\n}\nexports.userMove = userMove;\nfunction dropNewPiece(state, orig, dest, force) {\n    if (canDrop(state, orig, dest) || force) {\n        var piece = state.pieces[orig];\n        delete state.pieces[orig];\n        baseNewPiece(state, piece, dest, force);\n        callUserFunction(state.movable.events.afterNewPiece, piece.role, dest, {\n            predrop: false\n        });\n    } else if (canPredrop(state, orig, dest)) {\n        setPredrop(state, state.pieces[orig].role, dest);\n    } else {\n        unsetPremove(state);\n        unsetPredrop(state);\n    }\n    delete state.pieces[orig];\n    unselect(state);\n}\nexports.dropNewPiece = dropNewPiece;\nfunction selectSquare(state, key, force) {\n    if (state.selected) {\n        if (state.selected === key && !state.draggable.enabled) {\n            unselect(state);\n            state.hold.cancel();\n        } else if ((state.selectable.enabled || force) && state.selected !== key) {\n            if (userMove(state, state.selected, key)) state.stats.dragged = false;\n        } else state.hold.start();\n    } else if (isMovable(state, key) || isPremovable(state, key)) {\n        setSelected(state, key);\n        state.hold.start();\n    }\n    callUserFunction(state.events.select, key);\n}\nexports.selectSquare = selectSquare;\nfunction setSelected(state, key) {\n    state.selected = key;\n    if (isPremovable(state, key)) {\n        state.premovable.dests = premove_1.default(state.pieces, key, state.premovable.castle);\n    } else state.premovable.dests = undefined;\n}\nexports.setSelected = setSelected;\nfunction unselect(state) {\n    state.selected = undefined;\n    state.premovable.dests = undefined;\n    state.hold.cancel();\n}\nexports.unselect = unselect;\nfunction isMovable(state, orig) {\n    var piece = state.pieces[orig];\n    return piece && (state.movable.color === 'both' || state.movable.color === piece.color && state.turnColor === piece.color);\n}\nfunction canMove(state, orig, dest) {\n    return orig !== dest && isMovable(state, orig) && (state.movable.free || !!state.movable.dests && util_1.containsX(state.movable.dests[orig], dest));\n}\nexports.canMove = canMove;\nfunction canDrop(state, orig, dest) {\n    var piece = state.pieces[orig];\n    return piece && dest && (orig === dest || !state.pieces[dest]) && (state.movable.color === 'both' || state.movable.color === piece.color && state.turnColor === piece.color);\n}\nfunction isPremovable(state, orig) {\n    var piece = state.pieces[orig];\n    return piece && state.premovable.enabled && state.movable.color === piece.color && state.turnColor !== piece.color;\n}\nfunction canPremove(state, orig, dest) {\n    return orig !== dest && isPremovable(state, orig) && util_1.containsX(premove_1.default(state.pieces, orig, state.premovable.castle), dest);\n}\nfunction canPredrop(state, orig, dest) {\n    var piece = state.pieces[orig];\n    return piece && dest && (!state.pieces[dest] || state.pieces[dest].color !== state.movable.color) && state.predroppable.enabled && (piece.role !== 'pawn' || dest[1] !== '1' && dest[1] !== '8') && state.movable.color === piece.color && state.turnColor !== piece.color;\n}\nfunction isDraggable(state, orig) {\n    var piece = state.pieces[orig];\n    return piece && state.draggable.enabled && (state.movable.color === 'both' || state.movable.color === piece.color && (state.turnColor === piece.color || state.premovable.enabled));\n}\nexports.isDraggable = isDraggable;\nfunction playPremove(state) {\n    var move = state.premovable.current;\n    if (!move) return false;\n    var orig = move[0],\n        dest = move[1];\n    var success = false;\n    if (canMove(state, orig, dest)) {\n        var result = baseUserMove(state, orig, dest);\n        if (result) {\n            var metadata = { premove: true };\n            if (result !== true) metadata.captured = result;\n            callUserFunction(state.movable.events.after, orig, dest, metadata);\n            success = true;\n        }\n    }\n    unsetPremove(state);\n    return success;\n}\nexports.playPremove = playPremove;\nfunction playPredrop(state, validate) {\n    var drop = state.predroppable.current,\n        success = false;\n    if (!drop) return false;\n    if (validate(drop)) {\n        var piece = {\n            role: drop.role,\n            color: state.movable.color\n        };\n        if (baseNewPiece(state, piece, drop.key)) {\n            callUserFunction(state.movable.events.afterNewPiece, drop.role, drop.key, {\n                predrop: true\n            });\n            success = true;\n        }\n    }\n    unsetPredrop(state);\n    return success;\n}\nexports.playPredrop = playPredrop;\nfunction cancelMove(state) {\n    unsetPremove(state);\n    unsetPredrop(state);\n    unselect(state);\n}\nexports.cancelMove = cancelMove;\nfunction stop(state) {\n    state.movable.color = state.movable.dests = state.animation.current = undefined;\n    cancelMove(state);\n}\nexports.stop = stop;\nfunction getKeyAtDomPos(pos, asWhite, bounds) {\n    var file = Math.ceil(8 * ((pos[0] - bounds.left) / bounds.width));\n    if (!asWhite) file = 9 - file;\n    var rank = Math.ceil(8 - 8 * ((pos[1] - bounds.top) / bounds.height));\n    if (!asWhite) rank = 9 - rank;\n    return file > 0 && file < 9 && rank > 0 && rank < 9 ? util_1.pos2key([file, rank]) : undefined;\n}\nexports.getKeyAtDomPos = getKeyAtDomPos;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = __webpack_require__(0);\nvar cg = __webpack_require__(3);\nexports.initial = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR';\nvar roles = { p: 'pawn', r: 'rook', n: 'knight', b: 'bishop', q: 'queen', k: 'king' };\nvar letters = { pawn: 'p', rook: 'r', knight: 'n', bishop: 'b', queen: 'q', king: 'k' };\nfunction read(fen) {\n    if (fen === 'start') fen = exports.initial;\n    var pieces = {};\n    var row = 8;\n    var col = 0;\n    for (var _i = 0, fen_1 = fen; _i < fen_1.length; _i++) {\n        var c = fen_1[_i];\n        switch (c) {\n            case ' ':\n                return pieces;\n            case '/':\n                --row;\n                if (row === 0) return pieces;\n                col = 0;\n                break;\n            case '~':\n                pieces[util_1.pos2key([col, row])].promoted = true;\n                break;\n            default:\n                var nb = c.charCodeAt(0);\n                if (nb < 57) col += nb - 48;else {\n                    ++col;\n                    var role = c.toLowerCase();\n                    pieces[util_1.pos2key([col, row])] = {\n                        role: roles[role],\n                        color: c === role ? 'black' : 'white'\n                    };\n                }\n        }\n    }\n    return pieces;\n}\nexports.read = read;\nfunction write(pieces) {\n    var piece, letter;\n    return util_1.invRanks.map(function (y) {\n        return cg.ranks.map(function (x) {\n            piece = pieces[util_1.pos2key([x, y])];\n            if (piece) {\n                letter = letters[piece.role];\n                return piece.color === 'white' ? letter.toUpperCase() : letter;\n            } else return '1';\n        }).join('');\n    }).join('/').replace(/1{2,}/g, function (s) {\n        return s.length.toString();\n    });\n}\nexports.write = write;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NoZXNzZ3JvdW5kL2Zlbi5qcz84NzY4Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidXRpbF8xIiwicmVxdWlyZSIsImNnIiwiaW5pdGlhbCIsInJvbGVzIiwicCIsInIiLCJuIiwiYiIsInEiLCJrIiwibGV0dGVycyIsInBhd24iLCJyb29rIiwia25pZ2h0IiwiYmlzaG9wIiwicXVlZW4iLCJraW5nIiwicmVhZCIsImZlbiIsInBpZWNlcyIsInJvdyIsImNvbCIsIl9pIiwiZmVuXzEiLCJsZW5ndGgiLCJjIiwicG9zMmtleSIsInByb21vdGVkIiwibmIiLCJjaGFyQ29kZUF0Iiwicm9sZSIsInRvTG93ZXJDYXNlIiwiY29sb3IiLCJ3cml0ZSIsInBpZWNlIiwibGV0dGVyIiwiaW52UmFua3MiLCJtYXAiLCJ5IiwicmFua3MiLCJ4IiwidG9VcHBlckNhc2UiLCJqb2luIiwicmVwbGFjZSIsInMiLCJ0b1N0cmluZyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0FBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBLElBQUlDLFNBQVMsbUJBQUFDLENBQVEsQ0FBUixDQUFiO0FBQ0EsSUFBSUMsS0FBSyxtQkFBQUQsQ0FBUSxDQUFSLENBQVQ7QUFDQUgsUUFBUUssT0FBUixHQUFrQiw2Q0FBbEI7QUFDQSxJQUFJQyxRQUFRLEVBQUVDLEdBQUcsTUFBTCxFQUFhQyxHQUFHLE1BQWhCLEVBQXdCQyxHQUFHLFFBQTNCLEVBQXFDQyxHQUFHLFFBQXhDLEVBQWtEQyxHQUFHLE9BQXJELEVBQThEQyxHQUFHLE1BQWpFLEVBQVo7QUFDQSxJQUFJQyxVQUFVLEVBQUVDLE1BQU0sR0FBUixFQUFhQyxNQUFNLEdBQW5CLEVBQXdCQyxRQUFRLEdBQWhDLEVBQXFDQyxRQUFRLEdBQTdDLEVBQWtEQyxPQUFPLEdBQXpELEVBQThEQyxNQUFNLEdBQXBFLEVBQWQ7QUFDQSxTQUFTQyxJQUFULENBQWNDLEdBQWQsRUFBbUI7QUFDZixRQUFJQSxRQUFRLE9BQVosRUFDSUEsTUFBTXJCLFFBQVFLLE9BQWQ7QUFDSixRQUFJaUIsU0FBUyxFQUFiO0FBQ0EsUUFBSUMsTUFBTSxDQUFWO0FBQ0EsUUFBSUMsTUFBTSxDQUFWO0FBQ0EsU0FBSyxJQUFJQyxLQUFLLENBQVQsRUFBWUMsUUFBUUwsR0FBekIsRUFBOEJJLEtBQUtDLE1BQU1DLE1BQXpDLEVBQWlERixJQUFqRCxFQUF1RDtBQUNuRCxZQUFJRyxJQUFJRixNQUFNRCxFQUFOLENBQVI7QUFDQSxnQkFBUUcsQ0FBUjtBQUNJLGlCQUFLLEdBQUw7QUFBVSx1QkFBT04sTUFBUDtBQUNWLGlCQUFLLEdBQUw7QUFDSSxrQkFBRUMsR0FBRjtBQUNBLG9CQUFJQSxRQUFRLENBQVosRUFDSSxPQUFPRCxNQUFQO0FBQ0pFLHNCQUFNLENBQU47QUFDQTtBQUNKLGlCQUFLLEdBQUw7QUFDSUYsdUJBQU9wQixPQUFPMkIsT0FBUCxDQUFlLENBQUNMLEdBQUQsRUFBTUQsR0FBTixDQUFmLENBQVAsRUFBbUNPLFFBQW5DLEdBQThDLElBQTlDO0FBQ0E7QUFDSjtBQUNJLG9CQUFJQyxLQUFLSCxFQUFFSSxVQUFGLENBQWEsQ0FBYixDQUFUO0FBQ0Esb0JBQUlELEtBQUssRUFBVCxFQUNJUCxPQUFPTyxLQUFLLEVBQVosQ0FESixLQUVLO0FBQ0Qsc0JBQUVQLEdBQUY7QUFDQSx3QkFBSVMsT0FBT0wsRUFBRU0sV0FBRixFQUFYO0FBQ0FaLDJCQUFPcEIsT0FBTzJCLE9BQVAsQ0FBZSxDQUFDTCxHQUFELEVBQU1ELEdBQU4sQ0FBZixDQUFQLElBQXFDO0FBQ2pDVSw4QkFBTTNCLE1BQU0yQixJQUFOLENBRDJCO0FBRWpDRSwrQkFBUVAsTUFBTUssSUFBTixHQUFhLE9BQWIsR0FBdUI7QUFGRSxxQkFBckM7QUFJSDtBQXRCVDtBQXdCSDtBQUNELFdBQU9YLE1BQVA7QUFDSDtBQUNEdEIsUUFBUW9CLElBQVIsR0FBZUEsSUFBZjtBQUNBLFNBQVNnQixLQUFULENBQWVkLE1BQWYsRUFBdUI7QUFDbkIsUUFBSWUsS0FBSixFQUFXQyxNQUFYO0FBQ0EsV0FBT3BDLE9BQU9xQyxRQUFQLENBQWdCQyxHQUFoQixDQUFvQixVQUFVQyxDQUFWLEVBQWE7QUFBRSxlQUFPckMsR0FBR3NDLEtBQUgsQ0FBU0YsR0FBVCxDQUFhLFVBQVVHLENBQVYsRUFBYTtBQUN2RU4sb0JBQVFmLE9BQU9wQixPQUFPMkIsT0FBUCxDQUFlLENBQUNjLENBQUQsRUFBSUYsQ0FBSixDQUFmLENBQVAsQ0FBUjtBQUNBLGdCQUFJSixLQUFKLEVBQVc7QUFDUEMseUJBQVN6QixRQUFRd0IsTUFBTUosSUFBZCxDQUFUO0FBQ0EsdUJBQU9JLE1BQU1GLEtBQU4sS0FBZ0IsT0FBaEIsR0FBMEJHLE9BQU9NLFdBQVAsRUFBMUIsR0FBaUROLE1BQXhEO0FBQ0gsYUFIRCxNQUtJLE9BQU8sR0FBUDtBQUNQLFNBUmdELEVBUTlDTyxJQVI4QyxDQVF6QyxFQVJ5QyxDQUFQO0FBUTVCLEtBUlAsRUFRU0EsSUFSVCxDQVFjLEdBUmQsRUFRbUJDLE9BUm5CLENBUTJCLFFBUjNCLEVBUXFDLFVBQVVDLENBQVYsRUFBYTtBQUFFLGVBQU9BLEVBQUVwQixNQUFGLENBQVNxQixRQUFULEVBQVA7QUFBNkIsS0FSakYsQ0FBUDtBQVNIO0FBQ0RoRCxRQUFRb0MsS0FBUixHQUFnQkEsS0FBaEIiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHV0aWxfMSA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG52YXIgY2cgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbmV4cG9ydHMuaW5pdGlhbCA9ICdybmJxa2Juci9wcHBwcHBwcC84LzgvOC84L1BQUFBQUFBQL1JOQlFLQk5SJztcbnZhciByb2xlcyA9IHsgcDogJ3Bhd24nLCByOiAncm9vaycsIG46ICdrbmlnaHQnLCBiOiAnYmlzaG9wJywgcTogJ3F1ZWVuJywgazogJ2tpbmcnIH07XG52YXIgbGV0dGVycyA9IHsgcGF3bjogJ3AnLCByb29rOiAncicsIGtuaWdodDogJ24nLCBiaXNob3A6ICdiJywgcXVlZW46ICdxJywga2luZzogJ2snIH07XG5mdW5jdGlvbiByZWFkKGZlbikge1xuICAgIGlmIChmZW4gPT09ICdzdGFydCcpXG4gICAgICAgIGZlbiA9IGV4cG9ydHMuaW5pdGlhbDtcbiAgICB2YXIgcGllY2VzID0ge307XG4gICAgdmFyIHJvdyA9IDg7XG4gICAgdmFyIGNvbCA9IDA7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBmZW5fMSA9IGZlbjsgX2kgPCBmZW5fMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGMgPSBmZW5fMVtfaV07XG4gICAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICAgICAgY2FzZSAnICc6IHJldHVybiBwaWVjZXM7XG4gICAgICAgICAgICBjYXNlICcvJzpcbiAgICAgICAgICAgICAgICAtLXJvdztcbiAgICAgICAgICAgICAgICBpZiAocm93ID09PSAwKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGllY2VzO1xuICAgICAgICAgICAgICAgIGNvbCA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd+JzpcbiAgICAgICAgICAgICAgICBwaWVjZXNbdXRpbF8xLnBvczJrZXkoW2NvbCwgcm93XSldLnByb21vdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdmFyIG5iID0gYy5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICAgIGlmIChuYiA8IDU3KVxuICAgICAgICAgICAgICAgICAgICBjb2wgKz0gbmIgLSA0ODtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgKytjb2w7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb2xlID0gYy50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICBwaWVjZXNbdXRpbF8xLnBvczJrZXkoW2NvbCwgcm93XSldID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm9sZTogcm9sZXNbcm9sZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogKGMgPT09IHJvbGUgPyAnYmxhY2snIDogJ3doaXRlJylcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBpZWNlcztcbn1cbmV4cG9ydHMucmVhZCA9IHJlYWQ7XG5mdW5jdGlvbiB3cml0ZShwaWVjZXMpIHtcbiAgICB2YXIgcGllY2UsIGxldHRlcjtcbiAgICByZXR1cm4gdXRpbF8xLmludlJhbmtzLm1hcChmdW5jdGlvbiAoeSkgeyByZXR1cm4gY2cucmFua3MubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHBpZWNlID0gcGllY2VzW3V0aWxfMS5wb3Mya2V5KFt4LCB5XSldO1xuICAgICAgICBpZiAocGllY2UpIHtcbiAgICAgICAgICAgIGxldHRlciA9IGxldHRlcnNbcGllY2Uucm9sZV07XG4gICAgICAgICAgICByZXR1cm4gcGllY2UuY29sb3IgPT09ICd3aGl0ZScgPyBsZXR0ZXIudG9VcHBlckNhc2UoKSA6IGxldHRlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gJzEnO1xuICAgIH0pLmpvaW4oJycpOyB9KS5qb2luKCcvJykucmVwbGFjZSgvMXsyLH0vZywgZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMubGVuZ3RoLnRvU3RyaW5nKCk7IH0pO1xufVxuZXhwb3J0cy53cml0ZSA9IHdyaXRlO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9jaGVzc2dyb3VuZC9mZW4uanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\nexports.ranks = [1, 2, 3, 4, 5, 6, 7, 8];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NoZXNzZ3JvdW5kL3R5cGVzLmpzPzlmNWUiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmaWxlcyIsInJhbmtzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0FELFFBQVFFLEtBQVIsR0FBZ0IsQ0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLEdBQVgsRUFBZ0IsR0FBaEIsRUFBcUIsR0FBckIsRUFBMEIsR0FBMUIsRUFBK0IsR0FBL0IsRUFBb0MsR0FBcEMsQ0FBaEI7QUFDQUYsUUFBUUcsS0FBUixHQUFnQixDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsRUFBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLENBQW5CLEVBQXNCLENBQXRCLENBQWhCIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmlsZXMgPSBbJ2EnLCAnYicsICdjJywgJ2QnLCAnZScsICdmJywgJ2cnLCAnaCddO1xuZXhwb3J0cy5yYW5rcyA9IFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4XTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vY2hlc3Nncm91bmQvdHlwZXMuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) {\n            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = __webpack_require__(0);\nfunction anim(mutation, state) {\n    return state.animation.enabled ? animate(mutation, state) : render(mutation, state);\n}\nexports.anim = anim;\nfunction render(mutation, state) {\n    var result = mutation(state);\n    state.dom.redraw();\n    return result;\n}\nexports.render = render;\nfunction makePiece(key, piece) {\n    return {\n        key: key,\n        pos: util.key2pos(key),\n        piece: piece\n    };\n}\nfunction closer(piece, pieces) {\n    return pieces.sort(function (p1, p2) {\n        return util.distanceSq(piece.pos, p1.pos) - util.distanceSq(piece.pos, p2.pos);\n    })[0];\n}\nfunction computePlan(prevPieces, current) {\n    var anims = {},\n        animedOrigs = [],\n        fadings = {},\n        missings = [],\n        news = [],\n        prePieces = {};\n    var curP, preP, i, vector;\n    for (i in prevPieces) {\n        prePieces[i] = makePiece(i, prevPieces[i]);\n    }\n    for (var _i = 0, _a = util.allKeys; _i < _a.length; _i++) {\n        var key = _a[_i];\n        curP = current.pieces[key];\n        preP = prePieces[key];\n        if (curP) {\n            if (preP) {\n                if (!util.samePiece(curP, preP.piece)) {\n                    missings.push(preP);\n                    news.push(makePiece(key, curP));\n                }\n            } else news.push(makePiece(key, curP));\n        } else if (preP) missings.push(preP);\n    }\n    news.forEach(function (newP) {\n        preP = closer(newP, missings.filter(function (p) {\n            return util.samePiece(newP.piece, p.piece);\n        }));\n        if (preP) {\n            vector = [preP.pos[0] - newP.pos[0], preP.pos[1] - newP.pos[1]];\n            anims[newP.key] = vector.concat(vector);\n            animedOrigs.push(preP.key);\n        }\n    });\n    missings.forEach(function (p) {\n        if (!util.containsX(animedOrigs, p.key) && !(current.items ? current.items(p.pos, p.key) : false)) fadings[p.key] = p.piece;\n    });\n    return {\n        anims: anims,\n        fadings: fadings\n    };\n}\nvar perf = window.performance !== undefined ? window.performance : Date;\nfunction step(state, now) {\n    var cur = state.animation.current;\n    if (cur === undefined) {\n        if (!state.dom.destroyed) state.dom.redrawNow();\n        return;\n    }\n    var rest = 1 - (now - cur.start) * cur.frequency;\n    if (rest <= 0) {\n        state.animation.current = undefined;\n        state.dom.redrawNow();\n    } else {\n        var ease = easing(rest);\n        for (var i in cur.plan.anims) {\n            var cfg = cur.plan.anims[i];\n            cfg[2] = cfg[0] * ease;\n            cfg[3] = cfg[1] * ease;\n        }\n        state.dom.redrawNow(true);\n        util.raf(function (now) {\n            if (now === void 0) {\n                now = perf.now();\n            }\n            return step(state, now);\n        });\n    }\n}\nfunction animate(mutation, state) {\n    var prevPieces = __assign({}, state.pieces);\n    var result = mutation(state);\n    var plan = computePlan(prevPieces, state);\n    if (!isObjectEmpty(plan.anims) || !isObjectEmpty(plan.fadings)) {\n        var alreadyRunning = state.animation.current && state.animation.current.start;\n        state.animation.current = {\n            start: perf.now(),\n            frequency: 1 / state.animation.duration,\n            plan: plan\n        };\n        if (!alreadyRunning) step(state, perf.now());\n    } else {\n        state.dom.redraw();\n    }\n    return result;\n}\nfunction isObjectEmpty(o) {\n    for (var _ in o) {\n        return false;\n    }return true;\n}\nfunction easing(t) {\n    return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar board_1 = __webpack_require__(1);\nvar fen_1 = __webpack_require__(2);\nfunction configure(state, config) {\n    if (config.movable && config.movable.dests) state.movable.dests = undefined;\n    merge(state, config);\n    if (config.fen) {\n        state.pieces = fen_1.read(config.fen);\n        state.drawable.shapes = [];\n    }\n    if (config.hasOwnProperty('check')) board_1.setCheck(state, config.check || false);\n    if (config.hasOwnProperty('lastMove') && !config.lastMove) state.lastMove = undefined;else if (config.lastMove) state.lastMove = config.lastMove;\n    if (state.selected) board_1.setSelected(state, state.selected);\n    if (!state.animation.duration || state.animation.duration < 100) state.animation.enabled = false;\n    if (!state.movable.rookCastle && state.movable.dests) {\n        var rank_1 = state.movable.color === 'white' ? 1 : 8;\n        var kingStartPos = 'e' + rank_1;\n        var dests_1 = state.movable.dests[kingStartPos];\n        if (!dests_1 || state.pieces[kingStartPos].role !== 'king') return;\n        state.movable.dests[kingStartPos] = dests_1.filter(function (d) {\n            return !(d === 'a' + rank_1 && dests_1.indexOf('c' + rank_1) !== -1) && !(d === 'h' + rank_1 && dests_1.indexOf('g' + rank_1) !== -1);\n        });\n    }\n}\nexports.configure = configure;\n;\nfunction merge(base, extend) {\n    for (var key in extend) {\n        if (isObject(base[key]) && isObject(extend[key])) merge(base[key], extend[key]);else base[key] = extend[key];\n    }\n}\nfunction isObject(o) {\n    return (typeof o === \"undefined\" ? \"undefined\" : _typeof(o)) === 'object';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NoZXNzZ3JvdW5kL2NvbmZpZy5qcz82NmRhIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYm9hcmRfMSIsInJlcXVpcmUiLCJmZW5fMSIsImNvbmZpZ3VyZSIsInN0YXRlIiwiY29uZmlnIiwibW92YWJsZSIsImRlc3RzIiwidW5kZWZpbmVkIiwibWVyZ2UiLCJmZW4iLCJwaWVjZXMiLCJyZWFkIiwiZHJhd2FibGUiLCJzaGFwZXMiLCJoYXNPd25Qcm9wZXJ0eSIsInNldENoZWNrIiwiY2hlY2siLCJsYXN0TW92ZSIsInNlbGVjdGVkIiwic2V0U2VsZWN0ZWQiLCJhbmltYXRpb24iLCJkdXJhdGlvbiIsImVuYWJsZWQiLCJyb29rQ2FzdGxlIiwicmFua18xIiwiY29sb3IiLCJraW5nU3RhcnRQb3MiLCJkZXN0c18xIiwicm9sZSIsImZpbHRlciIsImQiLCJpbmRleE9mIiwiYmFzZSIsImV4dGVuZCIsImtleSIsImlzT2JqZWN0IiwibyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFDQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0EsSUFBSUMsVUFBVSxtQkFBQUMsQ0FBUSxDQUFSLENBQWQ7QUFDQSxJQUFJQyxRQUFRLG1CQUFBRCxDQUFRLENBQVIsQ0FBWjtBQUNBLFNBQVNFLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCQyxNQUExQixFQUFrQztBQUM5QixRQUFJQSxPQUFPQyxPQUFQLElBQWtCRCxPQUFPQyxPQUFQLENBQWVDLEtBQXJDLEVBQ0lILE1BQU1FLE9BQU4sQ0FBY0MsS0FBZCxHQUFzQkMsU0FBdEI7QUFDSkMsVUFBTUwsS0FBTixFQUFhQyxNQUFiO0FBQ0EsUUFBSUEsT0FBT0ssR0FBWCxFQUFnQjtBQUNaTixjQUFNTyxNQUFOLEdBQWVULE1BQU1VLElBQU4sQ0FBV1AsT0FBT0ssR0FBbEIsQ0FBZjtBQUNBTixjQUFNUyxRQUFOLENBQWVDLE1BQWYsR0FBd0IsRUFBeEI7QUFDSDtBQUNELFFBQUlULE9BQU9VLGNBQVAsQ0FBc0IsT0FBdEIsQ0FBSixFQUNJZixRQUFRZ0IsUUFBUixDQUFpQlosS0FBakIsRUFBd0JDLE9BQU9ZLEtBQVAsSUFBZ0IsS0FBeEM7QUFDSixRQUFJWixPQUFPVSxjQUFQLENBQXNCLFVBQXRCLEtBQXFDLENBQUNWLE9BQU9hLFFBQWpELEVBQ0lkLE1BQU1jLFFBQU4sR0FBaUJWLFNBQWpCLENBREosS0FFSyxJQUFJSCxPQUFPYSxRQUFYLEVBQ0RkLE1BQU1jLFFBQU4sR0FBaUJiLE9BQU9hLFFBQXhCO0FBQ0osUUFBSWQsTUFBTWUsUUFBVixFQUNJbkIsUUFBUW9CLFdBQVIsQ0FBb0JoQixLQUFwQixFQUEyQkEsTUFBTWUsUUFBakM7QUFDSixRQUFJLENBQUNmLE1BQU1pQixTQUFOLENBQWdCQyxRQUFqQixJQUE2QmxCLE1BQU1pQixTQUFOLENBQWdCQyxRQUFoQixHQUEyQixHQUE1RCxFQUNJbEIsTUFBTWlCLFNBQU4sQ0FBZ0JFLE9BQWhCLEdBQTBCLEtBQTFCO0FBQ0osUUFBSSxDQUFDbkIsTUFBTUUsT0FBTixDQUFja0IsVUFBZixJQUE2QnBCLE1BQU1FLE9BQU4sQ0FBY0MsS0FBL0MsRUFBc0Q7QUFDbEQsWUFBSWtCLFNBQVNyQixNQUFNRSxPQUFOLENBQWNvQixLQUFkLEtBQXdCLE9BQXhCLEdBQWtDLENBQWxDLEdBQXNDLENBQW5EO0FBQ0EsWUFBSUMsZUFBZSxNQUFNRixNQUF6QjtBQUNBLFlBQUlHLFVBQVV4QixNQUFNRSxPQUFOLENBQWNDLEtBQWQsQ0FBb0JvQixZQUFwQixDQUFkO0FBQ0EsWUFBSSxDQUFDQyxPQUFELElBQVl4QixNQUFNTyxNQUFOLENBQWFnQixZQUFiLEVBQTJCRSxJQUEzQixLQUFvQyxNQUFwRCxFQUNJO0FBQ0p6QixjQUFNRSxPQUFOLENBQWNDLEtBQWQsQ0FBb0JvQixZQUFwQixJQUFvQ0MsUUFBUUUsTUFBUixDQUFlLFVBQVVDLENBQVYsRUFBYTtBQUM1RCxtQkFBTyxFQUFHQSxNQUFNLE1BQU1OLE1BQWIsSUFBd0JHLFFBQVFJLE9BQVIsQ0FBZ0IsTUFBTVAsTUFBdEIsTUFBa0MsQ0FBQyxDQUE3RCxLQUNILEVBQUdNLE1BQU0sTUFBTU4sTUFBYixJQUF3QkcsUUFBUUksT0FBUixDQUFnQixNQUFNUCxNQUF0QixNQUFrQyxDQUFDLENBQTdELENBREo7QUFFSCxTQUhtQyxDQUFwQztBQUlIO0FBQ0o7QUFDRDNCLFFBQVFLLFNBQVIsR0FBb0JBLFNBQXBCO0FBQ0E7QUFDQSxTQUFTTSxLQUFULENBQWV3QixJQUFmLEVBQXFCQyxNQUFyQixFQUE2QjtBQUN6QixTQUFLLElBQUlDLEdBQVQsSUFBZ0JELE1BQWhCLEVBQXdCO0FBQ3BCLFlBQUlFLFNBQVNILEtBQUtFLEdBQUwsQ0FBVCxLQUF1QkMsU0FBU0YsT0FBT0MsR0FBUCxDQUFULENBQTNCLEVBQ0kxQixNQUFNd0IsS0FBS0UsR0FBTCxDQUFOLEVBQWlCRCxPQUFPQyxHQUFQLENBQWpCLEVBREosS0FHSUYsS0FBS0UsR0FBTCxJQUFZRCxPQUFPQyxHQUFQLENBQVo7QUFDUDtBQUNKO0FBQ0QsU0FBU0MsUUFBVCxDQUFrQkMsQ0FBbEIsRUFBcUI7QUFDakIsV0FBTyxRQUFPQSxDQUFQLHlDQUFPQSxDQUFQLE9BQWEsUUFBcEI7QUFDSCIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYm9hcmRfMSA9IHJlcXVpcmUoXCIuL2JvYXJkXCIpO1xudmFyIGZlbl8xID0gcmVxdWlyZShcIi4vZmVuXCIpO1xuZnVuY3Rpb24gY29uZmlndXJlKHN0YXRlLCBjb25maWcpIHtcbiAgICBpZiAoY29uZmlnLm1vdmFibGUgJiYgY29uZmlnLm1vdmFibGUuZGVzdHMpXG4gICAgICAgIHN0YXRlLm1vdmFibGUuZGVzdHMgPSB1bmRlZmluZWQ7XG4gICAgbWVyZ2Uoc3RhdGUsIGNvbmZpZyk7XG4gICAgaWYgKGNvbmZpZy5mZW4pIHtcbiAgICAgICAgc3RhdGUucGllY2VzID0gZmVuXzEucmVhZChjb25maWcuZmVuKTtcbiAgICAgICAgc3RhdGUuZHJhd2FibGUuc2hhcGVzID0gW107XG4gICAgfVxuICAgIGlmIChjb25maWcuaGFzT3duUHJvcGVydHkoJ2NoZWNrJykpXG4gICAgICAgIGJvYXJkXzEuc2V0Q2hlY2soc3RhdGUsIGNvbmZpZy5jaGVjayB8fCBmYWxzZSk7XG4gICAgaWYgKGNvbmZpZy5oYXNPd25Qcm9wZXJ0eSgnbGFzdE1vdmUnKSAmJiAhY29uZmlnLmxhc3RNb3ZlKVxuICAgICAgICBzdGF0ZS5sYXN0TW92ZSA9IHVuZGVmaW5lZDtcbiAgICBlbHNlIGlmIChjb25maWcubGFzdE1vdmUpXG4gICAgICAgIHN0YXRlLmxhc3RNb3ZlID0gY29uZmlnLmxhc3RNb3ZlO1xuICAgIGlmIChzdGF0ZS5zZWxlY3RlZClcbiAgICAgICAgYm9hcmRfMS5zZXRTZWxlY3RlZChzdGF0ZSwgc3RhdGUuc2VsZWN0ZWQpO1xuICAgIGlmICghc3RhdGUuYW5pbWF0aW9uLmR1cmF0aW9uIHx8IHN0YXRlLmFuaW1hdGlvbi5kdXJhdGlvbiA8IDEwMClcbiAgICAgICAgc3RhdGUuYW5pbWF0aW9uLmVuYWJsZWQgPSBmYWxzZTtcbiAgICBpZiAoIXN0YXRlLm1vdmFibGUucm9va0Nhc3RsZSAmJiBzdGF0ZS5tb3ZhYmxlLmRlc3RzKSB7XG4gICAgICAgIHZhciByYW5rXzEgPSBzdGF0ZS5tb3ZhYmxlLmNvbG9yID09PSAnd2hpdGUnID8gMSA6IDg7XG4gICAgICAgIHZhciBraW5nU3RhcnRQb3MgPSAnZScgKyByYW5rXzE7XG4gICAgICAgIHZhciBkZXN0c18xID0gc3RhdGUubW92YWJsZS5kZXN0c1traW5nU3RhcnRQb3NdO1xuICAgICAgICBpZiAoIWRlc3RzXzEgfHwgc3RhdGUucGllY2VzW2tpbmdTdGFydFBvc10ucm9sZSAhPT0gJ2tpbmcnKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBzdGF0ZS5tb3ZhYmxlLmRlc3RzW2tpbmdTdGFydFBvc10gPSBkZXN0c18xLmZpbHRlcihmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgcmV0dXJuICEoKGQgPT09ICdhJyArIHJhbmtfMSkgJiYgZGVzdHNfMS5pbmRleE9mKCdjJyArIHJhbmtfMSkgIT09IC0xKSAmJlxuICAgICAgICAgICAgICAgICEoKGQgPT09ICdoJyArIHJhbmtfMSkgJiYgZGVzdHNfMS5pbmRleE9mKCdnJyArIHJhbmtfMSkgIT09IC0xKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5jb25maWd1cmUgPSBjb25maWd1cmU7XG47XG5mdW5jdGlvbiBtZXJnZShiYXNlLCBleHRlbmQpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gZXh0ZW5kKSB7XG4gICAgICAgIGlmIChpc09iamVjdChiYXNlW2tleV0pICYmIGlzT2JqZWN0KGV4dGVuZFtrZXldKSlcbiAgICAgICAgICAgIG1lcmdlKGJhc2Vba2V5XSwgZXh0ZW5kW2tleV0pO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBiYXNlW2tleV0gPSBleHRlbmRba2V5XTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc09iamVjdChvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0Jztcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vY2hlc3Nncm91bmQvY29uZmlnLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar board = __webpack_require__(1);\nvar util = __webpack_require__(0);\nvar draw_1 = __webpack_require__(7);\nvar anim_1 = __webpack_require__(4);\nfunction start(s, e) {\n    if (e.button !== undefined && e.button !== 0) return;\n    if (e.touches && e.touches.length > 1) return;\n    e.preventDefault();\n    var asWhite = s.orientation === 'white',\n        bounds = s.dom.bounds(),\n        position = util.eventPosition(e),\n        orig = board.getKeyAtDomPos(position, asWhite, bounds);\n    if (!orig) return;\n    var piece = s.pieces[orig];\n    var previouslySelected = s.selected;\n    if (!previouslySelected && s.drawable.enabled && (s.drawable.eraseOnClick || !piece || piece.color !== s.turnColor)) draw_1.clear(s);\n    var hadPremove = !!s.premovable.current;\n    var hadPredrop = !!s.predroppable.current;\n    s.stats.ctrlKey = e.ctrlKey;\n    if (s.selected && board.canMove(s, s.selected, orig)) {\n        anim_1.anim(function (state) {\n            return board.selectSquare(state, orig);\n        }, s);\n    } else {\n        board.selectSquare(s, orig);\n    }\n    var stillSelected = s.selected === orig;\n    var element = pieceElementByKey(s, orig);\n    if (piece && element && stillSelected && board.isDraggable(s, orig)) {\n        var squareBounds = computeSquareBounds(orig, asWhite, bounds);\n        s.draggable.current = {\n            orig: orig,\n            origPos: util.key2pos(orig),\n            piece: piece,\n            rel: position,\n            epos: position,\n            pos: [0, 0],\n            dec: s.draggable.centerPiece ? [position[0] - (squareBounds.left + squareBounds.width / 2), position[1] - (squareBounds.top + squareBounds.height / 2)] : [0, 0],\n            started: s.draggable.autoDistance && s.stats.dragged,\n            element: element,\n            previouslySelected: previouslySelected,\n            originTarget: e.target\n        };\n        element.cgDragging = true;\n        element.classList.add('dragging');\n        var ghost = s.dom.elements.ghost;\n        if (ghost) {\n            ghost.className = \"ghost \" + piece.color + \" \" + piece.role;\n            util.translateAbs(ghost, util.posToTranslateAbs(bounds)(util.key2pos(orig), asWhite));\n            util.setVisible(ghost, true);\n        }\n        processDrag(s);\n    } else {\n        if (hadPremove) board.unsetPremove(s);\n        if (hadPredrop) board.unsetPredrop(s);\n    }\n    s.dom.redraw();\n}\nexports.start = start;\nfunction dragNewPiece(s, piece, e, force) {\n    var key = 'a0';\n    s.pieces[key] = piece;\n    s.dom.redraw();\n    var position = util.eventPosition(e),\n        asWhite = s.orientation === 'white',\n        bounds = s.dom.bounds(),\n        squareBounds = computeSquareBounds(key, asWhite, bounds);\n    var rel = [(asWhite ? 0 : 7) * squareBounds.width + bounds.left, (asWhite ? 8 : -1) * squareBounds.height + bounds.top];\n    s.draggable.current = {\n        orig: key,\n        origPos: util.key2pos(key),\n        piece: piece,\n        rel: rel,\n        epos: position,\n        pos: [position[0] - rel[0], position[1] - rel[1]],\n        dec: [-squareBounds.width / 2, -squareBounds.height / 2],\n        started: true,\n        element: function element() {\n            return pieceElementByKey(s, key);\n        },\n        originTarget: e.target,\n        newPiece: true,\n        force: force || false\n    };\n    processDrag(s);\n}\nexports.dragNewPiece = dragNewPiece;\nfunction processDrag(s) {\n    util.raf(function () {\n        var cur = s.draggable.current;\n        if (!cur) return;\n        if (s.animation.current && s.animation.current.plan.anims[cur.orig]) s.animation.current = undefined;\n        var origPiece = s.pieces[cur.orig];\n        if (!origPiece || !util.samePiece(origPiece, cur.piece)) cancel(s);else {\n            if (!cur.started && util.distanceSq(cur.epos, cur.rel) >= Math.pow(s.draggable.distance, 2)) cur.started = true;\n            if (cur.started) {\n                if (typeof cur.element === 'function') {\n                    var found = cur.element();\n                    if (!found) return;\n                    cur.element = found;\n                    cur.element.cgDragging = true;\n                    cur.element.classList.add('dragging');\n                }\n                var asWhite = s.orientation === 'white',\n                    bounds = s.dom.bounds();\n                cur.pos = [cur.epos[0] - cur.rel[0], cur.epos[1] - cur.rel[1]];\n                var translation = util.posToTranslateAbs(bounds)(cur.origPos, asWhite);\n                translation[0] += cur.pos[0] + cur.dec[0];\n                translation[1] += cur.pos[1] + cur.dec[1];\n                util.translateAbs(cur.element, translation);\n            }\n        }\n        processDrag(s);\n    });\n}\nfunction move(s, e) {\n    if (s.draggable.current && (!e.touches || e.touches.length < 2)) {\n        s.draggable.current.epos = util.eventPosition(e);\n    }\n}\nexports.move = move;\nfunction end(s, e) {\n    var cur = s.draggable.current;\n    if (!cur) return;\n    if (e.type === 'touchend' && cur && cur.originTarget !== e.target && !cur.newPiece) {\n        s.draggable.current = undefined;\n        return;\n    }\n    board.unsetPremove(s);\n    board.unsetPredrop(s);\n    var eventPos = util.eventPosition(e) || cur.epos;\n    var dest = board.getKeyAtDomPos(eventPos, s.orientation === 'white', s.dom.bounds());\n    if (dest && cur.started) {\n        if (cur.newPiece) board.dropNewPiece(s, cur.orig, dest, cur.force);else {\n            s.stats.ctrlKey = e.ctrlKey;\n            if (board.userMove(s, cur.orig, dest)) s.stats.dragged = true;\n        }\n    } else if (cur.newPiece) {\n        delete s.pieces[cur.orig];\n    } else if (s.draggable.deleteOnDropOff) {\n        delete s.pieces[cur.orig];\n        board.callUserFunction(s.events.change);\n    }\n    if (cur && cur.orig === cur.previouslySelected && (cur.orig === dest || !dest)) board.unselect(s);else if (!s.selectable.enabled) board.unselect(s);\n    removeDragElements(s);\n    s.draggable.current = undefined;\n    s.dom.redraw();\n}\nexports.end = end;\nfunction cancel(s) {\n    var cur = s.draggable.current;\n    if (cur) {\n        if (cur.newPiece) delete s.pieces[cur.orig];\n        s.draggable.current = undefined;\n        board.unselect(s);\n        removeDragElements(s);\n        s.dom.redraw();\n    }\n}\nexports.cancel = cancel;\nfunction removeDragElements(s) {\n    var e = s.dom.elements;\n    if (e.ghost) util.setVisible(e.ghost, false);\n}\nfunction computeSquareBounds(key, asWhite, bounds) {\n    var pos = util.key2pos(key);\n    if (!asWhite) {\n        pos[0] = 9 - pos[0];\n        pos[1] = 9 - pos[1];\n    }\n    return {\n        left: bounds.left + bounds.width * (pos[0] - 1) / 8,\n        top: bounds.top + bounds.height * (8 - pos[1]) / 8,\n        width: bounds.width / 8,\n        height: bounds.height / 8\n    };\n}\nfunction pieceElementByKey(s, key) {\n    var el = s.dom.elements.board.firstChild;\n    while (el) {\n        if (el.cgKey === key && el.tagName === 'PIECE') return el;\n        el = el.nextSibling;\n    }\n    return undefined;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar board_1 = __webpack_require__(1);\nvar util_1 = __webpack_require__(0);\nvar brushes = ['green', 'red', 'blue', 'yellow'];\nfunction start(state, e) {\n    if (e.touches && e.touches.length > 1) return;\n    e.stopPropagation();\n    e.preventDefault();\n    e.ctrlKey ? board_1.unselect(state) : board_1.cancelMove(state);\n    var position = util_1.eventPosition(e);\n    var orig = board_1.getKeyAtDomPos(position, state.orientation === 'white', state.dom.bounds());\n    if (!orig) return;\n    state.drawable.current = {\n        orig: orig,\n        pos: position,\n        brush: eventBrush(e)\n    };\n    processDraw(state);\n}\nexports.start = start;\nfunction processDraw(state) {\n    util_1.raf(function () {\n        var cur = state.drawable.current;\n        if (cur) {\n            var mouseSq = board_1.getKeyAtDomPos(cur.pos, state.orientation === 'white', state.dom.bounds());\n            if (mouseSq !== cur.mouseSq) {\n                cur.mouseSq = mouseSq;\n                cur.dest = mouseSq !== cur.orig ? mouseSq : undefined;\n                state.dom.redrawNow();\n            }\n            processDraw(state);\n        }\n    });\n}\nexports.processDraw = processDraw;\nfunction move(state, e) {\n    if (state.drawable.current) state.drawable.current.pos = util_1.eventPosition(e);\n}\nexports.move = move;\nfunction end(state) {\n    var cur = state.drawable.current;\n    if (cur) {\n        if (cur.mouseSq) addShape(state.drawable, cur);\n        cancel(state);\n    }\n}\nexports.end = end;\nfunction cancel(state) {\n    if (state.drawable.current) {\n        state.drawable.current = undefined;\n        state.dom.redraw();\n    }\n}\nexports.cancel = cancel;\nfunction clear(state) {\n    if (state.drawable.shapes.length) {\n        state.drawable.shapes = [];\n        state.dom.redraw();\n        onChange(state.drawable);\n    }\n}\nexports.clear = clear;\nfunction eventBrush(e) {\n    var a = e.shiftKey && util_1.isRightButton(e) ? 1 : 0;\n    var b = e.altKey ? 2 : 0;\n    return brushes[a + b];\n}\nfunction not(f) {\n    return function (x) {\n        return !f(x);\n    };\n}\nfunction addShape(drawable, cur) {\n    var sameShape = function sameShape(s) {\n        return s.orig === cur.orig && s.dest === cur.dest;\n    };\n    var similar = drawable.shapes.filter(sameShape)[0];\n    if (similar) drawable.shapes = drawable.shapes.filter(not(sameShape));\n    if (!similar || similar.brush !== cur.brush) drawable.shapes.push(cur);\n    onChange(drawable);\n}\nfunction onChange(drawable) {\n    if (drawable.onChange) drawable.onChange(drawable.shapes);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = __webpack_require__(0);\nfunction createElement(tagName) {\n    return document.createElementNS('http://www.w3.org/2000/svg', tagName);\n}\nexports.createElement = createElement;\nvar isTrident;\nfunction renderSvg(state, root) {\n    var d = state.drawable,\n        curD = d.current,\n        cur = curD && curD.mouseSq ? curD : undefined,\n        arrowDests = {};\n    d.shapes.concat(d.autoShapes).concat(cur ? [cur] : []).forEach(function (s) {\n        if (s.dest) arrowDests[s.dest] = (arrowDests[s.dest] || 0) + 1;\n    });\n    var shapes = d.shapes.concat(d.autoShapes).map(function (s) {\n        return {\n            shape: s,\n            current: false,\n            hash: shapeHash(s, arrowDests, false)\n        };\n    });\n    if (cur) shapes.push({\n        shape: cur,\n        current: true,\n        hash: shapeHash(cur, arrowDests, true)\n    });\n    var fullHash = shapes.map(function (sc) {\n        return sc.hash;\n    }).join('');\n    if (fullHash === state.drawable.prevSvgHash) return;\n    state.drawable.prevSvgHash = fullHash;\n    var defsEl = root.firstChild;\n    syncDefs(d, shapes, defsEl);\n    syncShapes(state, shapes, d.brushes, arrowDests, root, defsEl);\n}\nexports.renderSvg = renderSvg;\nfunction syncDefs(d, shapes, defsEl) {\n    var brushes = {};\n    var brush;\n    shapes.forEach(function (s) {\n        if (s.shape.dest) {\n            brush = d.brushes[s.shape.brush];\n            if (s.shape.modifiers) brush = makeCustomBrush(brush, s.shape.modifiers);\n            brushes[brush.key] = brush;\n        }\n    });\n    var keysInDom = {};\n    var el = defsEl.firstChild;\n    while (el) {\n        keysInDom[el.getAttribute('cgKey')] = true;\n        el = el.nextSibling;\n    }\n    for (var key in brushes) {\n        if (!keysInDom[key]) defsEl.appendChild(renderMarker(brushes[key]));\n    }\n}\nfunction syncShapes(state, shapes, brushes, arrowDests, root, defsEl) {\n    if (isTrident === undefined) isTrident = util_1.computeIsTrident();\n    var bounds = state.dom.bounds(),\n        hashesInDom = {},\n        toRemove = [];\n    shapes.forEach(function (sc) {\n        hashesInDom[sc.hash] = false;\n    });\n    var el = defsEl.nextSibling,\n        elHash;\n    while (el) {\n        elHash = el.getAttribute('cgHash');\n        if (hashesInDom.hasOwnProperty(elHash)) hashesInDom[elHash] = true;else toRemove.push(el);\n        el = el.nextSibling;\n    }\n    toRemove.forEach(function (el) {\n        return root.removeChild(el);\n    });\n    shapes.forEach(function (sc) {\n        if (!hashesInDom[sc.hash]) root.appendChild(renderShape(state, sc, brushes, arrowDests, bounds));\n    });\n}\nfunction shapeHash(_a, arrowDests, current) {\n    var orig = _a.orig,\n        dest = _a.dest,\n        brush = _a.brush,\n        piece = _a.piece,\n        modifiers = _a.modifiers;\n    return [current, orig, dest, brush, dest && arrowDests[dest] > 1, piece && pieceHash(piece), modifiers && modifiersHash(modifiers)].filter(function (x) {\n        return x;\n    }).join('');\n}\nfunction pieceHash(piece) {\n    return [piece.color, piece.role, piece.scale].filter(function (x) {\n        return x;\n    }).join('');\n}\nfunction modifiersHash(m) {\n    return '' + (m.lineWidth || '');\n}\nfunction renderShape(state, _a, brushes, arrowDests, bounds) {\n    var shape = _a.shape,\n        current = _a.current,\n        hash = _a.hash;\n    var el;\n    if (shape.piece) el = renderPiece(state.drawable.pieces.baseUrl, orient(util_1.key2pos(shape.orig), state.orientation), shape.piece, bounds);else {\n        var orig = orient(util_1.key2pos(shape.orig), state.orientation);\n        if (shape.orig && shape.dest) {\n            var brush = brushes[shape.brush];\n            if (shape.modifiers) brush = makeCustomBrush(brush, shape.modifiers);\n            el = renderArrow(brush, orig, orient(util_1.key2pos(shape.dest), state.orientation), current, arrowDests[shape.dest] > 1, bounds);\n        } else el = renderCircle(brushes[shape.brush], orig, current, bounds);\n    }\n    el.setAttribute('cgHash', hash);\n    return el;\n}\nfunction renderCircle(brush, pos, current, bounds) {\n    var o = pos2px(pos, bounds),\n        widths = circleWidth(bounds),\n        radius = (bounds.width + bounds.height) / 32;\n    return setAttributes(createElement('circle'), {\n        stroke: brush.color,\n        'stroke-width': widths[current ? 0 : 1],\n        fill: 'none',\n        opacity: opacity(brush, current),\n        cx: o[0],\n        cy: o[1],\n        r: radius - widths[1] / 2\n    });\n}\nfunction renderArrow(brush, orig, dest, current, shorten, bounds) {\n    var m = arrowMargin(bounds, shorten && !current),\n        a = pos2px(orig, bounds),\n        b = pos2px(dest, bounds),\n        dx = b[0] - a[0],\n        dy = b[1] - a[1],\n        angle = Math.atan2(dy, dx),\n        xo = Math.cos(angle) * m,\n        yo = Math.sin(angle) * m;\n    return setAttributes(createElement('line'), {\n        stroke: brush.color,\n        'stroke-width': lineWidth(brush, current, bounds),\n        'stroke-linecap': 'round',\n        'marker-end': isTrident ? undefined : 'url(#arrowhead-' + brush.key + ')',\n        opacity: opacity(brush, current),\n        x1: a[0],\n        y1: a[1],\n        x2: b[0] - xo,\n        y2: b[1] - yo\n    });\n}\nfunction renderPiece(baseUrl, pos, piece, bounds) {\n    var o = pos2px(pos, bounds),\n        size = bounds.width / 8 * (piece.scale || 1),\n        name = piece.color[0] + (piece.role === 'knight' ? 'n' : piece.role[0]).toUpperCase();\n    return setAttributes(createElement('image'), {\n        className: piece.role + \" \" + piece.color,\n        x: o[0] - size / 2,\n        y: o[1] - size / 2,\n        width: size,\n        height: size,\n        href: baseUrl + name + '.svg'\n    });\n}\nfunction renderMarker(brush) {\n    var marker = setAttributes(createElement('marker'), {\n        id: 'arrowhead-' + brush.key,\n        orient: 'auto',\n        markerWidth: 4,\n        markerHeight: 8,\n        refX: 2.05,\n        refY: 2.01\n    });\n    marker.appendChild(setAttributes(createElement('path'), {\n        d: 'M0,0 V4 L3,2 Z',\n        fill: brush.color\n    }));\n    marker.setAttribute('cgKey', brush.key);\n    return marker;\n}\nfunction setAttributes(el, attrs) {\n    for (var key in attrs) {\n        el.setAttribute(key, attrs[key]);\n    }return el;\n}\nfunction orient(pos, color) {\n    return color === 'white' ? pos : [9 - pos[0], 9 - pos[1]];\n}\nfunction makeCustomBrush(base, modifiers) {\n    var brush = {\n        color: base.color,\n        opacity: Math.round(base.opacity * 10) / 10,\n        lineWidth: Math.round(modifiers.lineWidth || base.lineWidth)\n    };\n    brush.key = [base.key, modifiers.lineWidth].filter(function (x) {\n        return x;\n    }).join('');\n    return brush;\n}\nfunction circleWidth(bounds) {\n    var base = bounds.width / 512;\n    return [3 * base, 4 * base];\n}\nfunction lineWidth(brush, current, bounds) {\n    return (brush.lineWidth || 10) * (current ? 0.85 : 1) / 512 * bounds.width;\n}\nfunction opacity(brush, current) {\n    return (brush.opacity || 1) * (current ? 0.9 : 1);\n}\nfunction arrowMargin(bounds, shorten) {\n    return isTrident ? 0 : (shorten ? 20 : 10) / 512 * bounds.width;\n}\nfunction pos2px(pos, bounds) {\n    return [(pos[0] - 0.5) * bounds.width / 8, (8.5 - pos[1]) * bounds.height / 8];\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports) {

eval("var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar g;\n\n// This works in non-strict mode\ng = function () {\n\treturn this;\n}();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOlsiZyIsIkZ1bmN0aW9uIiwiZXZhbCIsImUiLCJ3aW5kb3ciLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLENBQUo7O0FBRUE7QUFDQUEsSUFBSyxZQUFXO0FBQ2YsUUFBTyxJQUFQO0FBQ0EsQ0FGRyxFQUFKOztBQUlBLElBQUk7QUFDSDtBQUNBQSxLQUFJQSxLQUFLQyxTQUFTLGFBQVQsR0FBTCxJQUFrQyxDQUFDLEdBQUVDLElBQUgsRUFBUyxNQUFULENBQXRDO0FBQ0EsQ0FIRCxDQUdFLE9BQU1DLENBQU4sRUFBUztBQUNWO0FBQ0EsS0FBRyxRQUFPQyxNQUFQLHlDQUFPQSxNQUFQLE9BQWtCLFFBQXJCLEVBQ0NKLElBQUlJLE1BQUo7QUFDRDs7QUFFRDtBQUNBO0FBQ0E7O0FBRUFDLE9BQU9DLE9BQVAsR0FBaUJOLENBQWpCIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

eval("var Component = __webpack_require__(23)(\n  /* script */\n  __webpack_require__(22),\n  /* template */\n  __webpack_require__(24),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\nComponent.options.__file = \"/home/dave/Projects/davidborges.xyz/neochess/neochess-web/src/components/vue-chessboard/src/components/chessboard/index.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key !== \"__esModule\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] index.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-498bbca3\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-498bbca3\", Component.options)\n  }\n})()}\n\nmodule.exports = Component.exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jaGVzc2JvYXJkL2luZGV4LnZ1ZT84YmFiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRUFBK0UsaURBQWlELElBQUk7QUFDcEksbUNBQW1DOztBQUVuQztBQUNBLFlBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsImZpbGUiOiIxMC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKShcbiAgLyogc2NyaXB0ICovXG4gIHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlciEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL2luZGV4LnZ1ZVwiKSxcbiAgLyogdGVtcGxhdGUgKi9cbiAgcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP2lkPWRhdGEtdi00OThiYmNhMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vaW5kZXgudnVlXCIpLFxuICAvKiBzY29wZUlkICovXG4gIG51bGwsXG4gIC8qIGNzc01vZHVsZXMgKi9cbiAgbnVsbFxuKVxuQ29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCIvaG9tZS9kYXZlL1Byb2plY3RzL2RhdmlkYm9yZ2VzLnh5ei9uZW9jaGVzcy9uZW9jaGVzcy13ZWIvc3JjL2NvbXBvbmVudHMvdnVlLWNoZXNzYm9hcmQvc3JjL2NvbXBvbmVudHMvY2hlc3Nib2FyZC9pbmRleC52dWVcIlxuaWYgKENvbXBvbmVudC5lc01vZHVsZSAmJiBPYmplY3Qua2V5cyhDb21wb25lbnQuZXNNb2R1bGUpLnNvbWUoZnVuY3Rpb24gKGtleSkge3JldHVybiBrZXkgIT09IFwiZGVmYXVsdFwiICYmIGtleSAhPT0gXCJfX2VzTW9kdWxlXCJ9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbmlmIChDb21wb25lbnQub3B0aW9ucy5mdW5jdGlvbmFsKSB7Y29uc29sZS5lcnJvcihcIlt2dWUtbG9hZGVyXSBpbmRleC52dWU6IGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhcmUgbm90IHN1cHBvcnRlZCB3aXRoIHRlbXBsYXRlcywgdGhleSBzaG91bGQgdXNlIHJlbmRlciBmdW5jdGlvbnMuXCIpfVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtNDk4YmJjYTNcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH0gZWxzZSB7XG4gICAgaG90QVBJLnJlbG9hZChcImRhdGEtdi00OThiYmNhM1wiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfVxufSkoKX1cblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvY29tcG9uZW50cy9jaGVzc2JvYXJkL2luZGV4LnZ1ZVxuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*\n * Copyright (c) 2016, Jeff Hlywa (jhlywa@gmail.com)\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *\n *----------------------------------------------------------------------------*/\n\n/* minified license below  */\n\n/* @license\n * Copyright (c) 2016, Jeff Hlywa (jhlywa@gmail.com)\n * Released under the BSD license\n * https://github.com/jhlywa/chess.js/blob/master/LICENSE\n */\n\nvar Chess = function Chess(fen) {\n\n  /* jshint indent: false */\n\n  var BLACK = 'b';\n  var WHITE = 'w';\n\n  var EMPTY = -1;\n\n  var PAWN = 'p';\n  var KNIGHT = 'n';\n  var BISHOP = 'b';\n  var ROOK = 'r';\n  var QUEEN = 'q';\n  var KING = 'k';\n\n  var SYMBOLS = 'pnbrqkPNBRQK';\n\n  var DEFAULT_POSITION = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';\n\n  var POSSIBLE_RESULTS = ['1-0', '0-1', '1/2-1/2', '*'];\n\n  var PAWN_OFFSETS = {\n    b: [16, 32, 17, 15],\n    w: [-16, -32, -17, -15]\n  };\n\n  var PIECE_OFFSETS = {\n    n: [-18, -33, -31, -14, 18, 33, 31, 14],\n    b: [-17, -15, 17, 15],\n    r: [-16, 1, 16, -1],\n    q: [-17, -16, -15, 1, 17, 16, 15, -1],\n    k: [-17, -16, -15, 1, 17, 16, 15, -1]\n  };\n\n  var ATTACKS = [20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20, 0, 0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0, 24, 24, 24, 24, 24, 24, 56, 0, 56, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 2, 53, 56, 53, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 2, 24, 2, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 24, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 24, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 24, 0, 0, 0, 0, 20, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 20, 0, 0, 20, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 20];\n\n  var RAYS = [17, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 15, 0, 0, 17, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 17, 0, 0, 0, 0, 16, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 16, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 16, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 0, 16, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 16, 15, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, -15, -16, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, -16, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, -16, 0, 0, -17, 0, 0, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, -16, 0, 0, 0, -17, 0, 0, 0, 0, 0, 0, -15, 0, 0, 0, 0, -16, 0, 0, 0, 0, -17, 0, 0, 0, 0, -15, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, -17, 0, 0, -15, 0, 0, 0, 0, 0, 0, -16, 0, 0, 0, 0, 0, 0, -17];\n\n  var SHIFTS = { p: 0, n: 1, b: 2, r: 3, q: 4, k: 5 };\n\n  var FLAGS = {\n    NORMAL: 'n',\n    CAPTURE: 'c',\n    BIG_PAWN: 'b',\n    EP_CAPTURE: 'e',\n    PROMOTION: 'p',\n    KSIDE_CASTLE: 'k',\n    QSIDE_CASTLE: 'q'\n  };\n\n  var BITS = {\n    NORMAL: 1,\n    CAPTURE: 2,\n    BIG_PAWN: 4,\n    EP_CAPTURE: 8,\n    PROMOTION: 16,\n    KSIDE_CASTLE: 32,\n    QSIDE_CASTLE: 64\n  };\n\n  var RANK_1 = 7;\n  var RANK_2 = 6;\n  var RANK_3 = 5;\n  var RANK_4 = 4;\n  var RANK_5 = 3;\n  var RANK_6 = 2;\n  var RANK_7 = 1;\n  var RANK_8 = 0;\n\n  var SQUARES = {\n    a8: 0, b8: 1, c8: 2, d8: 3, e8: 4, f8: 5, g8: 6, h8: 7,\n    a7: 16, b7: 17, c7: 18, d7: 19, e7: 20, f7: 21, g7: 22, h7: 23,\n    a6: 32, b6: 33, c6: 34, d6: 35, e6: 36, f6: 37, g6: 38, h6: 39,\n    a5: 48, b5: 49, c5: 50, d5: 51, e5: 52, f5: 53, g5: 54, h5: 55,\n    a4: 64, b4: 65, c4: 66, d4: 67, e4: 68, f4: 69, g4: 70, h4: 71,\n    a3: 80, b3: 81, c3: 82, d3: 83, e3: 84, f3: 85, g3: 86, h3: 87,\n    a2: 96, b2: 97, c2: 98, d2: 99, e2: 100, f2: 101, g2: 102, h2: 103,\n    a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119\n  };\n\n  var ROOKS = {\n    w: [{ square: SQUARES.a1, flag: BITS.QSIDE_CASTLE }, { square: SQUARES.h1, flag: BITS.KSIDE_CASTLE }],\n    b: [{ square: SQUARES.a8, flag: BITS.QSIDE_CASTLE }, { square: SQUARES.h8, flag: BITS.KSIDE_CASTLE }]\n  };\n\n  var board = new Array(128);\n  var kings = { w: EMPTY, b: EMPTY };\n  var _turn = WHITE;\n  var castling = { w: 0, b: 0 };\n  var ep_square = EMPTY;\n  var half_moves = 0;\n  var move_number = 1;\n  var _history = [];\n  var header = {};\n\n  /* if the user passes in a fen string, load it, else default to\n   * starting position\n   */\n  if (typeof fen === 'undefined') {\n    _load(DEFAULT_POSITION);\n  } else {\n    _load(fen);\n  }\n\n  function _clear() {\n    board = new Array(128);\n    kings = { w: EMPTY, b: EMPTY };\n    _turn = WHITE;\n    castling = { w: 0, b: 0 };\n    ep_square = EMPTY;\n    half_moves = 0;\n    move_number = 1;\n    _history = [];\n    header = {};\n    update_setup(generate_fen());\n  }\n\n  function _reset() {\n    _load(DEFAULT_POSITION);\n  }\n\n  function _load(fen) {\n    var tokens = fen.split(/\\s+/);\n    var position = tokens[0];\n    var square = 0;\n\n    if (!_validate_fen(fen).valid) {\n      return false;\n    }\n\n    _clear();\n\n    for (var i = 0; i < position.length; i++) {\n      var piece = position.charAt(i);\n\n      if (piece === '/') {\n        square += 8;\n      } else if (is_digit(piece)) {\n        square += parseInt(piece, 10);\n      } else {\n        var color = piece < 'a' ? WHITE : BLACK;\n        _put({ type: piece.toLowerCase(), color: color }, algebraic(square));\n        square++;\n      }\n    }\n\n    _turn = tokens[1];\n\n    if (tokens[2].indexOf('K') > -1) {\n      castling.w |= BITS.KSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('Q') > -1) {\n      castling.w |= BITS.QSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('k') > -1) {\n      castling.b |= BITS.KSIDE_CASTLE;\n    }\n    if (tokens[2].indexOf('q') > -1) {\n      castling.b |= BITS.QSIDE_CASTLE;\n    }\n\n    ep_square = tokens[3] === '-' ? EMPTY : SQUARES[tokens[3]];\n    half_moves = parseInt(tokens[4], 10);\n    move_number = parseInt(tokens[5], 10);\n\n    update_setup(generate_fen());\n\n    return true;\n  }\n\n  /* TODO: this function is pretty much crap - it validates structure but\n   * completely ignores content (e.g. doesn't verify that each side has a king)\n   * ... we should rewrite this, and ditch the silly error_number field while\n   * we're at it\n   */\n  function _validate_fen(fen) {\n    var errors = {\n      0: 'No errors.',\n      1: 'FEN string must contain six space-delimited fields.',\n      2: '6th field (move number) must be a positive integer.',\n      3: '5th field (half move counter) must be a non-negative integer.',\n      4: '4th field (en-passant square) is invalid.',\n      5: '3rd field (castling availability) is invalid.',\n      6: '2nd field (side to move) is invalid.',\n      7: '1st field (piece positions) does not contain 8 \\'/\\'-delimited rows.',\n      8: '1st field (piece positions) is invalid [consecutive numbers].',\n      9: '1st field (piece positions) is invalid [invalid piece].',\n      10: '1st field (piece positions) is invalid [row too large].',\n      11: 'Illegal en-passant square'\n    };\n\n    /* 1st criterion: 6 space-seperated fields? */\n    var tokens = fen.split(/\\s+/);\n    if (tokens.length !== 6) {\n      return { valid: false, error_number: 1, error: errors[1] };\n    }\n\n    /* 2nd criterion: move number field is a integer value > 0? */\n    if (isNaN(tokens[5]) || parseInt(tokens[5], 10) <= 0) {\n      return { valid: false, error_number: 2, error: errors[2] };\n    }\n\n    /* 3rd criterion: half move counter is an integer >= 0? */\n    if (isNaN(tokens[4]) || parseInt(tokens[4], 10) < 0) {\n      return { valid: false, error_number: 3, error: errors[3] };\n    }\n\n    /* 4th criterion: 4th field is a valid e.p.-string? */\n    if (!/^(-|[abcdefgh][36])$/.test(tokens[3])) {\n      return { valid: false, error_number: 4, error: errors[4] };\n    }\n\n    /* 5th criterion: 3th field is a valid castle-string? */\n    if (!/^(KQ?k?q?|Qk?q?|kq?|q|-)$/.test(tokens[2])) {\n      return { valid: false, error_number: 5, error: errors[5] };\n    }\n\n    /* 6th criterion: 2nd field is \"w\" (white) or \"b\" (black)? */\n    if (!/^(w|b)$/.test(tokens[1])) {\n      return { valid: false, error_number: 6, error: errors[6] };\n    }\n\n    /* 7th criterion: 1st field contains 8 rows? */\n    var rows = tokens[0].split('/');\n    if (rows.length !== 8) {\n      return { valid: false, error_number: 7, error: errors[7] };\n    }\n\n    /* 8th criterion: every row is valid? */\n    for (var i = 0; i < rows.length; i++) {\n      /* check for right sum of fields AND not two numbers in succession */\n      var sum_fields = 0;\n      var previous_was_number = false;\n\n      for (var k = 0; k < rows[i].length; k++) {\n        if (!isNaN(rows[i][k])) {\n          if (previous_was_number) {\n            return { valid: false, error_number: 8, error: errors[8] };\n          }\n          sum_fields += parseInt(rows[i][k], 10);\n          previous_was_number = true;\n        } else {\n          if (!/^[prnbqkPRNBQK]$/.test(rows[i][k])) {\n            return { valid: false, error_number: 9, error: errors[9] };\n          }\n          sum_fields += 1;\n          previous_was_number = false;\n        }\n      }\n      if (sum_fields !== 8) {\n        return { valid: false, error_number: 10, error: errors[10] };\n      }\n    }\n\n    if (tokens[3][1] == '3' && tokens[1] == 'w' || tokens[3][1] == '6' && tokens[1] == 'b') {\n      return { valid: false, error_number: 11, error: errors[11] };\n    }\n\n    /* everything's okay! */\n    return { valid: true, error_number: 0, error: errors[0] };\n  }\n\n  function generate_fen() {\n    var empty = 0;\n    var fen = '';\n\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      if (board[i] == null) {\n        empty++;\n      } else {\n        if (empty > 0) {\n          fen += empty;\n          empty = 0;\n        }\n        var color = board[i].color;\n        var piece = board[i].type;\n\n        fen += color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n      }\n\n      if (i + 1 & 0x88) {\n        if (empty > 0) {\n          fen += empty;\n        }\n\n        if (i !== SQUARES.h1) {\n          fen += '/';\n        }\n\n        empty = 0;\n        i += 8;\n      }\n    }\n\n    var cflags = '';\n    if (castling[WHITE] & BITS.KSIDE_CASTLE) {\n      cflags += 'K';\n    }\n    if (castling[WHITE] & BITS.QSIDE_CASTLE) {\n      cflags += 'Q';\n    }\n    if (castling[BLACK] & BITS.KSIDE_CASTLE) {\n      cflags += 'k';\n    }\n    if (castling[BLACK] & BITS.QSIDE_CASTLE) {\n      cflags += 'q';\n    }\n\n    /* do we have an empty castling flag? */\n    cflags = cflags || '-';\n    var epflags = ep_square === EMPTY ? '-' : algebraic(ep_square);\n\n    return [fen, _turn, cflags, epflags, half_moves, move_number].join(' ');\n  }\n\n  function set_header(args) {\n    for (var i = 0; i < args.length; i += 2) {\n      if (typeof args[i] === 'string' && typeof args[i + 1] === 'string') {\n        header[args[i]] = args[i + 1];\n      }\n    }\n    return header;\n  }\n\n  /* called when the initial board setup is changed with put() or remove().\n   * modifies the SetUp and FEN properties of the header object.  if the FEN is\n   * equal to the default position, the SetUp and FEN are deleted\n   * the setup is only updated if history.length is zero, ie moves haven't been\n   * made.\n   */\n  function update_setup(fen) {\n    if (_history.length > 0) return;\n\n    if (fen !== DEFAULT_POSITION) {\n      header['SetUp'] = '1';\n      header['FEN'] = fen;\n    } else {\n      delete header['SetUp'];\n      delete header['FEN'];\n    }\n  }\n\n  function _get(square) {\n    var piece = board[SQUARES[square]];\n    return piece ? { type: piece.type, color: piece.color } : null;\n  }\n\n  function _put(piece, square) {\n    /* check for valid piece object */\n    if (!('type' in piece && 'color' in piece)) {\n      return false;\n    }\n\n    /* check for piece */\n    if (SYMBOLS.indexOf(piece.type.toLowerCase()) === -1) {\n      return false;\n    }\n\n    /* check for valid square */\n    if (!(square in SQUARES)) {\n      return false;\n    }\n\n    var sq = SQUARES[square];\n\n    /* don't let the user place more than one king */\n    if (piece.type == KING && !(kings[piece.color] == EMPTY || kings[piece.color] == sq)) {\n      return false;\n    }\n\n    board[sq] = { type: piece.type, color: piece.color };\n    if (piece.type === KING) {\n      kings[piece.color] = sq;\n    }\n\n    update_setup(generate_fen());\n\n    return true;\n  }\n\n  function _remove(square) {\n    var piece = _get(square);\n    board[SQUARES[square]] = null;\n    if (piece && piece.type === KING) {\n      kings[piece.color] = EMPTY;\n    }\n\n    update_setup(generate_fen());\n\n    return piece;\n  }\n\n  function build_move(board, from, to, flags, promotion) {\n    var move = {\n      color: _turn,\n      from: from,\n      to: to,\n      flags: flags,\n      piece: board[from].type\n    };\n\n    if (promotion) {\n      move.flags |= BITS.PROMOTION;\n      move.promotion = promotion;\n    }\n\n    if (board[to]) {\n      move.captured = board[to].type;\n    } else if (flags & BITS.EP_CAPTURE) {\n      move.captured = PAWN;\n    }\n    return move;\n  }\n\n  function generate_moves(options) {\n    function add_move(board, moves, from, to, flags) {\n      /* if pawn promotion */\n      if (board[from].type === PAWN && (rank(to) === RANK_8 || rank(to) === RANK_1)) {\n        var pieces = [QUEEN, ROOK, BISHOP, KNIGHT];\n        for (var i = 0, len = pieces.length; i < len; i++) {\n          moves.push(build_move(board, from, to, flags, pieces[i]));\n        }\n      } else {\n        moves.push(build_move(board, from, to, flags));\n      }\n    }\n\n    var moves = [];\n    var us = _turn;\n    var them = swap_color(us);\n    var second_rank = { b: RANK_7, w: RANK_2 };\n\n    var first_sq = SQUARES.a8;\n    var last_sq = SQUARES.h1;\n    var single_square = false;\n\n    /* do we want legal moves? */\n    var legal = typeof options !== 'undefined' && 'legal' in options ? options.legal : true;\n\n    /* are we generating moves for a single square? */\n    if (typeof options !== 'undefined' && 'square' in options) {\n      if (options.square in SQUARES) {\n        first_sq = last_sq = SQUARES[options.square];\n        single_square = true;\n      } else {\n        /* invalid square */\n        return [];\n      }\n    }\n\n    for (var i = first_sq; i <= last_sq; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) {\n        i += 7;continue;\n      }\n\n      var piece = board[i];\n      if (piece == null || piece.color !== us) {\n        continue;\n      }\n\n      if (piece.type === PAWN) {\n        /* single square, non-capturing */\n        var square = i + PAWN_OFFSETS[us][0];\n        if (board[square] == null) {\n          add_move(board, moves, i, square, BITS.NORMAL);\n\n          /* double square */\n          var square = i + PAWN_OFFSETS[us][1];\n          if (second_rank[us] === rank(i) && board[square] == null) {\n            add_move(board, moves, i, square, BITS.BIG_PAWN);\n          }\n        }\n\n        /* pawn captures */\n        for (j = 2; j < 4; j++) {\n          var square = i + PAWN_OFFSETS[us][j];\n          if (square & 0x88) continue;\n\n          if (board[square] != null && board[square].color === them) {\n            add_move(board, moves, i, square, BITS.CAPTURE);\n          } else if (square === ep_square) {\n            add_move(board, moves, i, ep_square, BITS.EP_CAPTURE);\n          }\n        }\n      } else {\n        for (var j = 0, len = PIECE_OFFSETS[piece.type].length; j < len; j++) {\n          var offset = PIECE_OFFSETS[piece.type][j];\n          var square = i;\n\n          while (true) {\n            square += offset;\n            if (square & 0x88) break;\n\n            if (board[square] == null) {\n              add_move(board, moves, i, square, BITS.NORMAL);\n            } else {\n              if (board[square].color === us) break;\n              add_move(board, moves, i, square, BITS.CAPTURE);\n              break;\n            }\n\n            /* break, if knight or king */\n            if (piece.type === 'n' || piece.type === 'k') break;\n          }\n        }\n      }\n    }\n\n    /* check for castling if: a) we're generating all moves, or b) we're doing\n     * single square move generation on the king's square\n     */\n    if (!single_square || last_sq === kings[us]) {\n      /* king-side castling */\n      if (castling[us] & BITS.KSIDE_CASTLE) {\n        var castling_from = kings[us];\n        var castling_to = castling_from + 2;\n\n        if (board[castling_from + 1] == null && board[castling_to] == null && !attacked(them, kings[us]) && !attacked(them, castling_from + 1) && !attacked(them, castling_to)) {\n          add_move(board, moves, kings[us], castling_to, BITS.KSIDE_CASTLE);\n        }\n      }\n\n      /* queen-side castling */\n      if (castling[us] & BITS.QSIDE_CASTLE) {\n        var castling_from = kings[us];\n        var castling_to = castling_from - 2;\n\n        if (board[castling_from - 1] == null && board[castling_from - 2] == null && board[castling_from - 3] == null && !attacked(them, kings[us]) && !attacked(them, castling_from - 1) && !attacked(them, castling_to)) {\n          add_move(board, moves, kings[us], castling_to, BITS.QSIDE_CASTLE);\n        }\n      }\n    }\n\n    /* return all pseudo-legal moves (this includes moves that allow the king\n     * to be captured)\n     */\n    if (!legal) {\n      return moves;\n    }\n\n    /* filter out illegal moves */\n    var legal_moves = [];\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i]);\n      if (!king_attacked(us)) {\n        legal_moves.push(moves[i]);\n      }\n      undo_move();\n    }\n\n    return legal_moves;\n  }\n\n  /* convert a move from 0x88 coordinates to Standard Algebraic Notation\n   * (SAN)\n   *\n   * @param {boolean} sloppy Use the sloppy SAN generator to work around over\n   * disambiguation bugs in Fritz and Chessbase.  See below:\n   *\n   * r1bqkbnr/ppp2ppp/2n5/1B1pP3/4P3/8/PPPP2PP/RNBQK1NR b KQkq - 2 4\n   * 4. ... Nge7 is overly disambiguated because the knight on c6 is pinned\n   * 4. ... Ne7 is technically the valid SAN\n   */\n  function move_to_san(move, sloppy) {\n\n    var output = '';\n\n    if (move.flags & BITS.KSIDE_CASTLE) {\n      output = 'O-O';\n    } else if (move.flags & BITS.QSIDE_CASTLE) {\n      output = 'O-O-O';\n    } else {\n      var disambiguator = get_disambiguator(move, sloppy);\n\n      if (move.piece !== PAWN) {\n        output += move.piece.toUpperCase() + disambiguator;\n      }\n\n      if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n        if (move.piece === PAWN) {\n          output += algebraic(move.from)[0];\n        }\n        output += 'x';\n      }\n\n      output += algebraic(move.to);\n\n      if (move.flags & BITS.PROMOTION) {\n        output += '=' + move.promotion.toUpperCase();\n      }\n    }\n\n    make_move(move);\n    if (_in_check()) {\n      if (_in_checkmate()) {\n        output += '#';\n      } else {\n        output += '+';\n      }\n    }\n    undo_move();\n\n    return output;\n  }\n\n  // parses all of the decorators out of a SAN string\n  function stripped_san(move) {\n    return move.replace(/=/, '').replace(/[+#]?[?!]*$/, '');\n  }\n\n  function attacked(color, square) {\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      /* did we run off the end of the board */\n      if (i & 0x88) {\n        i += 7;continue;\n      }\n\n      /* if empty square or wrong color */\n      if (board[i] == null || board[i].color !== color) continue;\n\n      var piece = board[i];\n      var difference = i - square;\n      var index = difference + 119;\n\n      if (ATTACKS[index] & 1 << SHIFTS[piece.type]) {\n        if (piece.type === PAWN) {\n          if (difference > 0) {\n            if (piece.color === WHITE) return true;\n          } else {\n            if (piece.color === BLACK) return true;\n          }\n          continue;\n        }\n\n        /* if the piece is a knight or a king */\n        if (piece.type === 'n' || piece.type === 'k') return true;\n\n        var offset = RAYS[index];\n        var j = i + offset;\n\n        var blocked = false;\n        while (j !== square) {\n          if (board[j] != null) {\n            blocked = true;break;\n          }\n          j += offset;\n        }\n\n        if (!blocked) return true;\n      }\n    }\n\n    return false;\n  }\n\n  function king_attacked(color) {\n    return attacked(swap_color(color), kings[color]);\n  }\n\n  function _in_check() {\n    return king_attacked(_turn);\n  }\n\n  function _in_checkmate() {\n    return _in_check() && generate_moves().length === 0;\n  }\n\n  function _in_stalemate() {\n    return !_in_check() && generate_moves().length === 0;\n  }\n\n  function _insufficient_material() {\n    var pieces = {};\n    var bishops = [];\n    var num_pieces = 0;\n    var sq_color = 0;\n\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      sq_color = (sq_color + 1) % 2;\n      if (i & 0x88) {\n        i += 7;continue;\n      }\n\n      var piece = board[i];\n      if (piece) {\n        pieces[piece.type] = piece.type in pieces ? pieces[piece.type] + 1 : 1;\n        if (piece.type === BISHOP) {\n          bishops.push(sq_color);\n        }\n        num_pieces++;\n      }\n    }\n\n    /* k vs. k */\n    if (num_pieces === 2) {\n      return true;\n    }\n\n    /* k vs. kn .... or .... k vs. kb */\n    else if (num_pieces === 3 && (pieces[BISHOP] === 1 || pieces[KNIGHT] === 1)) {\n        return true;\n      }\n\n      /* kb vs. kb where any number of bishops are all on the same color */\n      else if (num_pieces === pieces[BISHOP] + 2) {\n          var sum = 0;\n          var len = bishops.length;\n          for (var i = 0; i < len; i++) {\n            sum += bishops[i];\n          }\n          if (sum === 0 || sum === len) {\n            return true;\n          }\n        }\n\n    return false;\n  }\n\n  function _in_threefold_repetition() {\n    /* TODO: while this function is fine for casual use, a better\n     * implementation would use a Zobrist key (instead of FEN). the\n     * Zobrist key would be maintained in the make_move/undo_move functions,\n     * avoiding the costly that we do below.\n     */\n    var moves = [];\n    var positions = {};\n    var repetition = false;\n\n    while (true) {\n      var move = undo_move();\n      if (!move) break;\n      moves.push(move);\n    }\n\n    while (true) {\n      /* remove the last two fields in the FEN string, they're not needed\n       * when checking for draw by rep */\n      var fen = generate_fen().split(' ').slice(0, 4).join(' ');\n\n      /* has the position occurred three or move times */\n      positions[fen] = fen in positions ? positions[fen] + 1 : 1;\n      if (positions[fen] >= 3) {\n        repetition = true;\n      }\n\n      if (!moves.length) {\n        break;\n      }\n      make_move(moves.pop());\n    }\n\n    return repetition;\n  }\n\n  function push(move) {\n    _history.push({\n      move: move,\n      kings: { b: kings.b, w: kings.w },\n      turn: _turn,\n      castling: { b: castling.b, w: castling.w },\n      ep_square: ep_square,\n      half_moves: half_moves,\n      move_number: move_number\n    });\n  }\n\n  function make_move(move) {\n    var us = _turn;\n    var them = swap_color(us);\n    push(move);\n\n    board[move.to] = board[move.from];\n    board[move.from] = null;\n\n    /* if ep capture, remove the captured pawn */\n    if (move.flags & BITS.EP_CAPTURE) {\n      if (_turn === BLACK) {\n        board[move.to - 16] = null;\n      } else {\n        board[move.to + 16] = null;\n      }\n    }\n\n    /* if pawn promotion, replace with new piece */\n    if (move.flags & BITS.PROMOTION) {\n      board[move.to] = { type: move.promotion, color: us };\n    }\n\n    /* if we moved the king */\n    if (board[move.to].type === KING) {\n      kings[board[move.to].color] = move.to;\n\n      /* if we castled, move the rook next to the king */\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        var castling_to = move.to - 1;\n        var castling_from = move.to + 1;\n        board[castling_to] = board[castling_from];\n        board[castling_from] = null;\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        var castling_to = move.to + 1;\n        var castling_from = move.to - 2;\n        board[castling_to] = board[castling_from];\n        board[castling_from] = null;\n      }\n\n      /* turn off castling */\n      castling[us] = '';\n    }\n\n    /* turn off castling if we move a rook */\n    if (castling[us]) {\n      for (var i = 0, len = ROOKS[us].length; i < len; i++) {\n        if (move.from === ROOKS[us][i].square && castling[us] & ROOKS[us][i].flag) {\n          castling[us] ^= ROOKS[us][i].flag;\n          break;\n        }\n      }\n    }\n\n    /* turn off castling if we capture a rook */\n    if (castling[them]) {\n      for (var i = 0, len = ROOKS[them].length; i < len; i++) {\n        if (move.to === ROOKS[them][i].square && castling[them] & ROOKS[them][i].flag) {\n          castling[them] ^= ROOKS[them][i].flag;\n          break;\n        }\n      }\n    }\n\n    /* if big pawn move, update the en passant square */\n    if (move.flags & BITS.BIG_PAWN) {\n      if (_turn === 'b') {\n        ep_square = move.to - 16;\n      } else {\n        ep_square = move.to + 16;\n      }\n    } else {\n      ep_square = EMPTY;\n    }\n\n    /* reset the 50 move counter if a pawn is moved or a piece is captured */\n    if (move.piece === PAWN) {\n      half_moves = 0;\n    } else if (move.flags & (BITS.CAPTURE | BITS.EP_CAPTURE)) {\n      half_moves = 0;\n    } else {\n      half_moves++;\n    }\n\n    if (_turn === BLACK) {\n      move_number++;\n    }\n    _turn = swap_color(_turn);\n  }\n\n  function undo_move() {\n    var old = _history.pop();\n    if (old == null) {\n      return null;\n    }\n\n    var move = old.move;\n    kings = old.kings;\n    _turn = old.turn;\n    castling = old.castling;\n    ep_square = old.ep_square;\n    half_moves = old.half_moves;\n    move_number = old.move_number;\n\n    var us = _turn;\n    var them = swap_color(_turn);\n\n    board[move.from] = board[move.to];\n    board[move.from].type = move.piece; // to undo any promotions\n    board[move.to] = null;\n\n    if (move.flags & BITS.CAPTURE) {\n      board[move.to] = { type: move.captured, color: them };\n    } else if (move.flags & BITS.EP_CAPTURE) {\n      var index;\n      if (us === BLACK) {\n        index = move.to - 16;\n      } else {\n        index = move.to + 16;\n      }\n      board[index] = { type: PAWN, color: them };\n    }\n\n    if (move.flags & (BITS.KSIDE_CASTLE | BITS.QSIDE_CASTLE)) {\n      var castling_to, castling_from;\n      if (move.flags & BITS.KSIDE_CASTLE) {\n        castling_to = move.to + 1;\n        castling_from = move.to - 1;\n      } else if (move.flags & BITS.QSIDE_CASTLE) {\n        castling_to = move.to - 2;\n        castling_from = move.to + 1;\n      }\n\n      board[castling_to] = board[castling_from];\n      board[castling_from] = null;\n    }\n\n    return move;\n  }\n\n  /* this function is used to uniquely identify ambiguous moves */\n  function get_disambiguator(move, sloppy) {\n    var moves = generate_moves({ legal: !sloppy });\n\n    var from = move.from;\n    var to = move.to;\n    var piece = move.piece;\n\n    var ambiguities = 0;\n    var same_rank = 0;\n    var same_file = 0;\n\n    for (var i = 0, len = moves.length; i < len; i++) {\n      var ambig_from = moves[i].from;\n      var ambig_to = moves[i].to;\n      var ambig_piece = moves[i].piece;\n\n      /* if a move of the same piece type ends on the same to square, we'll\n       * need to add a disambiguator to the algebraic notation\n       */\n      if (piece === ambig_piece && from !== ambig_from && to === ambig_to) {\n        ambiguities++;\n\n        if (rank(from) === rank(ambig_from)) {\n          same_rank++;\n        }\n\n        if (file(from) === file(ambig_from)) {\n          same_file++;\n        }\n      }\n    }\n\n    if (ambiguities > 0) {\n      /* if there exists a similar moving piece on the same rank and file as\n       * the move in question, use the square as the disambiguator\n       */\n      if (same_rank > 0 && same_file > 0) {\n        return algebraic(from);\n      }\n      /* if the moving piece rests on the same file, use the rank symbol as the\n       * disambiguator\n       */\n      else if (same_file > 0) {\n          return algebraic(from).charAt(1);\n        }\n        /* else use the file symbol */\n        else {\n            return algebraic(from).charAt(0);\n          }\n    }\n\n    return '';\n  }\n\n  function _ascii() {\n    var s = '   +------------------------+\\n';\n    for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n      /* display the rank */\n      if (file(i) === 0) {\n        s += ' ' + '87654321'[rank(i)] + ' |';\n      }\n\n      /* empty piece */\n      if (board[i] == null) {\n        s += ' . ';\n      } else {\n        var piece = board[i].type;\n        var color = board[i].color;\n        var symbol = color === WHITE ? piece.toUpperCase() : piece.toLowerCase();\n        s += ' ' + symbol + ' ';\n      }\n\n      if (i + 1 & 0x88) {\n        s += '|\\n';\n        i += 8;\n      }\n    }\n    s += '   +------------------------+\\n';\n    s += '     a  b  c  d  e  f  g  h\\n';\n\n    return s;\n  }\n\n  // convert a move from Standard Algebraic Notation (SAN) to 0x88 coordinates\n  function move_from_san(move, sloppy) {\n    // strip off any move decorations: e.g Nf3+?!\n    var clean_move = stripped_san(move);\n\n    // if we're using the sloppy parser run a regex to grab piece, to, and from\n    // this should parse invalid SAN like: Pe2-e4, Rc1c4, Qf3xf7\n    if (sloppy) {\n      var matches = clean_move.match(/([pnbrqkPNBRQK])?([a-h][1-8])x?-?([a-h][1-8])([qrbnQRBN])?/);\n      if (matches) {\n        var piece = matches[1];\n        var from = matches[2];\n        var to = matches[3];\n        var promotion = matches[4];\n      }\n    }\n\n    var moves = generate_moves();\n    for (var i = 0, len = moves.length; i < len; i++) {\n      // try the strict parser first, then the sloppy parser if requested\n      // by the user\n      if (clean_move === stripped_san(move_to_san(moves[i])) || sloppy && clean_move === stripped_san(move_to_san(moves[i], true))) {\n        return moves[i];\n      } else {\n        if (matches && (!piece || piece.toLowerCase() == moves[i].piece) && SQUARES[from] == moves[i].from && SQUARES[to] == moves[i].to && (!promotion || promotion.toLowerCase() == moves[i].promotion)) {\n          return moves[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /*****************************************************************************\n   * UTILITY FUNCTIONS\n   ****************************************************************************/\n  function rank(i) {\n    return i >> 4;\n  }\n\n  function file(i) {\n    return i & 15;\n  }\n\n  function algebraic(i) {\n    var f = file(i),\n        r = rank(i);\n    return 'abcdefgh'.substring(f, f + 1) + '87654321'.substring(r, r + 1);\n  }\n\n  function swap_color(c) {\n    return c === WHITE ? BLACK : WHITE;\n  }\n\n  function is_digit(c) {\n    return '0123456789'.indexOf(c) !== -1;\n  }\n\n  /* pretty = external move object */\n  function make_pretty(ugly_move) {\n    var move = clone(ugly_move);\n    move.san = move_to_san(move, false);\n    move.to = algebraic(move.to);\n    move.from = algebraic(move.from);\n\n    var flags = '';\n\n    for (var flag in BITS) {\n      if (BITS[flag] & move.flags) {\n        flags += FLAGS[flag];\n      }\n    }\n    move.flags = flags;\n\n    return move;\n  }\n\n  function clone(obj) {\n    var dupe = obj instanceof Array ? [] : {};\n\n    for (var property in obj) {\n      if ((typeof property === 'undefined' ? 'undefined' : _typeof(property)) === 'object') {\n        dupe[property] = clone(obj[property]);\n      } else {\n        dupe[property] = obj[property];\n      }\n    }\n\n    return dupe;\n  }\n\n  function trim(str) {\n    return str.replace(/^\\s+|\\s+$/g, '');\n  }\n\n  /*****************************************************************************\n   * DEBUGGING UTILITIES\n   ****************************************************************************/\n  function _perft(depth) {\n    var moves = generate_moves({ legal: false });\n    var nodes = 0;\n    var color = _turn;\n\n    for (var i = 0, len = moves.length; i < len; i++) {\n      make_move(moves[i]);\n      if (!king_attacked(color)) {\n        if (depth - 1 > 0) {\n          var child_nodes = _perft(depth - 1);\n          nodes += child_nodes;\n        } else {\n          nodes++;\n        }\n      }\n      undo_move();\n    }\n\n    return nodes;\n  }\n\n  return {\n    /***************************************************************************\n     * PUBLIC CONSTANTS (is there a better way to do this?)\n     **************************************************************************/\n    WHITE: WHITE,\n    BLACK: BLACK,\n    PAWN: PAWN,\n    KNIGHT: KNIGHT,\n    BISHOP: BISHOP,\n    ROOK: ROOK,\n    QUEEN: QUEEN,\n    KING: KING,\n    SQUARES: function () {\n      /* from the ECMA-262 spec (section 12.6.4):\n       * \"The mechanics of enumerating the properties ... is\n       * implementation dependent\"\n       * so: for (var sq in SQUARES) { keys.push(sq); } might not be\n       * ordered correctly\n       */\n      var keys = [];\n      for (var i = SQUARES.a8; i <= SQUARES.h1; i++) {\n        if (i & 0x88) {\n          i += 7;continue;\n        }\n        keys.push(algebraic(i));\n      }\n      return keys;\n    }(),\n    FLAGS: FLAGS,\n\n    /***************************************************************************\n     * PUBLIC API\n     **************************************************************************/\n    load: function load(fen) {\n      return _load(fen);\n    },\n\n    reset: function reset() {\n      return _reset();\n    },\n\n    moves: function moves(options) {\n      /* The internal representation of a chess move is in 0x88 format, and\n       * not meant to be human-readable.  The code below converts the 0x88\n       * square coordinates to algebraic coordinates.  It also prunes an\n       * unnecessary move keys resulting from a verbose call.\n       */\n\n      var ugly_moves = generate_moves(options);\n      var moves = [];\n\n      for (var i = 0, len = ugly_moves.length; i < len; i++) {\n\n        /* does the user want a full move object (most likely not), or just\n         * SAN\n         */\n        if (typeof options !== 'undefined' && 'verbose' in options && options.verbose) {\n          moves.push(make_pretty(ugly_moves[i]));\n        } else {\n          moves.push(move_to_san(ugly_moves[i], false));\n        }\n      }\n\n      return moves;\n    },\n\n    in_check: function in_check() {\n      return _in_check();\n    },\n\n    in_checkmate: function in_checkmate() {\n      return _in_checkmate();\n    },\n\n    in_stalemate: function in_stalemate() {\n      return _in_stalemate();\n    },\n\n    in_draw: function in_draw() {\n      return half_moves >= 100 || _in_stalemate() || _insufficient_material() || _in_threefold_repetition();\n    },\n\n    insufficient_material: function insufficient_material() {\n      return _insufficient_material();\n    },\n\n    in_threefold_repetition: function in_threefold_repetition() {\n      return _in_threefold_repetition();\n    },\n\n    game_over: function game_over() {\n      return half_moves >= 100 || _in_checkmate() || _in_stalemate() || _insufficient_material() || _in_threefold_repetition();\n    },\n\n    validate_fen: function validate_fen(fen) {\n      return _validate_fen(fen);\n    },\n\n    fen: function fen() {\n      return generate_fen();\n    },\n\n    pgn: function pgn(options) {\n      /* using the specification from http://www.chessclub.com/help/PGN-spec\n       * example for html usage: .pgn({ max_width: 72, newline_char: \"<br />\" })\n       */\n      var newline = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && typeof options.newline_char === 'string' ? options.newline_char : '\\n';\n      var max_width = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && typeof options.max_width === 'number' ? options.max_width : 0;\n      var result = [];\n      var header_exists = false;\n\n      /* add the PGN header headerrmation */\n      for (var i in header) {\n        /* TODO: order of enumerated properties in header object is not\n         * guaranteed, see ECMA-262 spec (section 12.6.4)\n         */\n        result.push('[' + i + ' \\\"' + header[i] + '\\\"]' + newline);\n        header_exists = true;\n      }\n\n      if (header_exists && _history.length) {\n        result.push(newline);\n      }\n\n      /* pop all of history onto reversed_history */\n      var reversed_history = [];\n      while (_history.length > 0) {\n        reversed_history.push(undo_move());\n      }\n\n      var moves = [];\n      var move_string = '';\n\n      /* build the list of moves.  a move_string looks like: \"3. e3 e6\" */\n      while (reversed_history.length > 0) {\n        var move = reversed_history.pop();\n\n        /* if the position started with black to move, start PGN with 1. ... */\n        if (!_history.length && move.color === 'b') {\n          move_string = move_number + '. ...';\n        } else if (move.color === 'w') {\n          /* store the previous generated move_string if we have one */\n          if (move_string.length) {\n            moves.push(move_string);\n          }\n          move_string = move_number + '.';\n        }\n\n        move_string = move_string + ' ' + move_to_san(move, false);\n        make_move(move);\n      }\n\n      /* are there any other leftover moves? */\n      if (move_string.length) {\n        moves.push(move_string);\n      }\n\n      /* is there a result? */\n      if (typeof header.Result !== 'undefined') {\n        moves.push(header.Result);\n      }\n\n      /* history should be back to what is was before we started generating PGN,\n       * so join together moves\n       */\n      if (max_width === 0) {\n        return result.join('') + moves.join(' ');\n      }\n\n      /* wrap the PGN output at max_width */\n      var current_width = 0;\n      for (var i = 0; i < moves.length; i++) {\n        /* if the current move will push past max_width */\n        if (current_width + moves[i].length > max_width && i !== 0) {\n\n          /* don't end the line with whitespace */\n          if (result[result.length - 1] === ' ') {\n            result.pop();\n          }\n\n          result.push(newline);\n          current_width = 0;\n        } else if (i !== 0) {\n          result.push(' ');\n          current_width++;\n        }\n        result.push(moves[i]);\n        current_width += moves[i].length;\n      }\n\n      return result.join('');\n    },\n\n    load_pgn: function load_pgn(pgn, options) {\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy = typeof options !== 'undefined' && 'sloppy' in options ? options.sloppy : false;\n\n      function mask(str) {\n        return str.replace(/\\\\/g, '\\\\');\n      }\n\n      function has_keys(object) {\n        for (var key in object) {\n          return true;\n        }\n        return false;\n      }\n\n      function parse_pgn_header(header, options) {\n        var newline_char = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && typeof options.newline_char === 'string' ? options.newline_char : '\\r?\\n';\n        var header_obj = {};\n        var headers = header.split(new RegExp(mask(newline_char)));\n        var key = '';\n        var value = '';\n\n        for (var i = 0; i < headers.length; i++) {\n          key = headers[i].replace(/^\\[([A-Z][A-Za-z]*)\\s.*\\]$/, '$1');\n          value = headers[i].replace(/^\\[[A-Za-z]+\\s\"(.*)\"\\]$/, '$1');\n          if (trim(key).length > 0) {\n            header_obj[key] = value;\n          }\n        }\n\n        return header_obj;\n      }\n\n      var newline_char = (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && typeof options.newline_char === 'string' ? options.newline_char : '\\r?\\n';\n      var regex = new RegExp('^(\\\\[(.|' + mask(newline_char) + ')*\\\\])' + '(' + mask(newline_char) + ')*' + '1.(' + mask(newline_char) + '|.)*$', 'g');\n\n      /* get header part of the PGN file */\n      var header_string = pgn.replace(regex, '$1');\n\n      /* no info part given, begins with moves */\n      if (header_string[0] !== '[') {\n        header_string = '';\n      }\n\n      _reset();\n\n      /* parse PGN header */\n      var headers = parse_pgn_header(header_string, options);\n      for (var key in headers) {\n        set_header([key, headers[key]]);\n      }\n\n      /* load the starting position indicated by [Setup '1'] and\n      * [FEN position] */\n      if (headers['SetUp'] === '1') {\n        if (!('FEN' in headers && _load(headers['FEN']))) {\n          return false;\n        }\n      }\n\n      /* delete header to get the moves */\n      var ms = pgn.replace(header_string, '').replace(new RegExp(mask(newline_char), 'g'), ' ');\n\n      /* delete comments */\n      ms = ms.replace(/(\\{[^}]+\\})+?/g, '');\n\n      /* delete recursive annotation variations */\n      var rav_regex = /(\\([^\\(\\)]+\\))+?/g;\n      while (rav_regex.test(ms)) {\n        ms = ms.replace(rav_regex, '');\n      }\n\n      /* delete move numbers */\n      ms = ms.replace(/\\d+\\.(\\.\\.)?/g, '');\n\n      /* delete ... indicating black to move */\n      ms = ms.replace(/\\.\\.\\./g, '');\n\n      /* delete numeric annotation glyphs */\n      ms = ms.replace(/\\$\\d+/g, '');\n\n      /* trim and get array of moves */\n      var moves = trim(ms).split(new RegExp(/\\s+/));\n\n      /* delete empty entries */\n      moves = moves.join(',').replace(/,,+/g, ',').split(',');\n      var move = '';\n\n      for (var half_move = 0; half_move < moves.length - 1; half_move++) {\n        move = move_from_san(moves[half_move], sloppy);\n\n        /* move not possible! (don't clear the board to examine to show the\n         * latest valid position)\n         */\n        if (move == null) {\n          return false;\n        } else {\n          make_move(move);\n        }\n      }\n\n      /* examine last move */\n      move = moves[moves.length - 1];\n      if (POSSIBLE_RESULTS.indexOf(move) > -1) {\n        if (has_keys(header) && typeof header.Result === 'undefined') {\n          set_header(['Result', move]);\n        }\n      } else {\n        move = move_from_san(move, sloppy);\n        if (move == null) {\n          return false;\n        } else {\n          make_move(move);\n        }\n      }\n      return true;\n    },\n\n    header: function header() {\n      return set_header(arguments);\n    },\n\n    ascii: function ascii() {\n      return _ascii();\n    },\n\n    turn: function turn() {\n      return _turn;\n    },\n\n    move: function move(_move, options) {\n      /* The move function can be called with in the following parameters:\n       *\n       * .move('Nxb7')      <- where 'move' is a case-sensitive SAN string\n       *\n       * .move({ from: 'h7', <- where the 'move' is a move object (additional\n       *         to :'h8',      fields are ignored)\n       *         promotion: 'q',\n       *      })\n       */\n\n      // allow the user to specify the sloppy move parser to work around over\n      // disambiguation bugs in Fritz and Chessbase\n      var sloppy = typeof options !== 'undefined' && 'sloppy' in options ? options.sloppy : false;\n\n      var move_obj = null;\n\n      if (typeof _move === 'string') {\n        move_obj = move_from_san(_move, sloppy);\n      } else if ((typeof _move === 'undefined' ? 'undefined' : _typeof(_move)) === 'object') {\n        var moves = generate_moves();\n\n        /* convert the pretty move object to an ugly move object */\n        for (var i = 0, len = moves.length; i < len; i++) {\n          if (_move.from === algebraic(moves[i].from) && _move.to === algebraic(moves[i].to) && (!('promotion' in moves[i]) || _move.promotion === moves[i].promotion)) {\n            move_obj = moves[i];\n            break;\n          }\n        }\n      }\n\n      /* failed to find move */\n      if (!move_obj) {\n        return null;\n      }\n\n      /* need to make a copy of move because we can't generate SAN after the\n       * move is made\n       */\n      var pretty_move = make_pretty(move_obj);\n\n      make_move(move_obj);\n\n      return pretty_move;\n    },\n\n    undo: function undo() {\n      var move = undo_move();\n      return move ? make_pretty(move) : null;\n    },\n\n    clear: function clear() {\n      return _clear();\n    },\n\n    put: function put(piece, square) {\n      return _put(piece, square);\n    },\n\n    get: function get(square) {\n      return _get(square);\n    },\n\n    remove: function remove(square) {\n      return _remove(square);\n    },\n\n    perft: function perft(depth) {\n      return _perft(depth);\n    },\n\n    square_color: function square_color(square) {\n      if (square in SQUARES) {\n        var sq_0x88 = SQUARES[square];\n        return (rank(sq_0x88) + file(sq_0x88)) % 2 === 0 ? 'light' : 'dark';\n      }\n\n      return null;\n    },\n\n    history: function history(options) {\n      var reversed_history = [];\n      var move_history = [];\n      var verbose = typeof options !== 'undefined' && 'verbose' in options && options.verbose;\n\n      while (_history.length > 0) {\n        reversed_history.push(undo_move());\n      }\n\n      while (reversed_history.length > 0) {\n        var move = reversed_history.pop();\n        if (verbose) {\n          move_history.push(make_pretty(move));\n        } else {\n          move_history.push(move_to_san(move));\n        }\n        make_move(move);\n      }\n\n      return move_history;\n    }\n\n  };\n};\n\n/* export Chess object if using node or any other CommonJS compatible\n * environment */\nif (true) exports.Chess = Chess;\n/* export Chess object for any RequireJS compatible environment */\nif (true) !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n  return Chess;\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar board = __webpack_require__(1);\nvar fen_1 = __webpack_require__(2);\nvar config_1 = __webpack_require__(5);\nvar anim_1 = __webpack_require__(4);\nvar drag_1 = __webpack_require__(6);\nvar explosion_1 = __webpack_require__(15);\nfunction start(state, redrawAll) {\n    function toggleOrientation() {\n        board.toggleOrientation(state);\n        redrawAll();\n    }\n    ;\n    return {\n        set: function set(config) {\n            if (config.orientation && config.orientation !== state.orientation) toggleOrientation();\n            (config.fen ? anim_1.anim : anim_1.render)(function (state) {\n                return config_1.configure(state, config);\n            }, state);\n        },\n        state: state,\n        getFen: function getFen() {\n            return fen_1.write(state.pieces);\n        },\n        toggleOrientation: toggleOrientation,\n        setPieces: function setPieces(pieces) {\n            anim_1.anim(function (state) {\n                return board.setPieces(state, pieces);\n            }, state);\n        },\n        selectSquare: function selectSquare(key, force) {\n            if (key) anim_1.anim(function (state) {\n                return board.selectSquare(state, key, force);\n            }, state);else if (state.selected) {\n                board.unselect(state);\n                state.dom.redraw();\n            }\n        },\n        move: function move(orig, dest) {\n            anim_1.anim(function (state) {\n                return board.baseMove(state, orig, dest);\n            }, state);\n        },\n        newPiece: function newPiece(piece, key) {\n            anim_1.anim(function (state) {\n                return board.baseNewPiece(state, piece, key);\n            }, state);\n        },\n        playPremove: function playPremove() {\n            if (state.premovable.current) {\n                if (anim_1.anim(board.playPremove, state)) return true;\n                state.dom.redraw();\n            }\n            return false;\n        },\n        playPredrop: function playPredrop(validate) {\n            if (state.predroppable.current) {\n                var result = board.playPredrop(state, validate);\n                state.dom.redraw();\n                return result;\n            }\n            return false;\n        },\n        cancelPremove: function cancelPremove() {\n            anim_1.render(board.unsetPremove, state);\n        },\n        cancelPredrop: function cancelPredrop() {\n            anim_1.render(board.unsetPredrop, state);\n        },\n        cancelMove: function cancelMove() {\n            anim_1.render(function (state) {\n                board.cancelMove(state);drag_1.cancel(state);\n            }, state);\n        },\n        stop: function stop() {\n            anim_1.render(function (state) {\n                board.stop(state);drag_1.cancel(state);\n            }, state);\n        },\n        explode: function explode(keys) {\n            explosion_1.default(state, keys);\n        },\n        setAutoShapes: function setAutoShapes(shapes) {\n            anim_1.render(function (state) {\n                return state.drawable.autoShapes = shapes;\n            }, state);\n        },\n        setShapes: function setShapes(shapes) {\n            anim_1.render(function (state) {\n                return state.drawable.shapes = shapes;\n            }, state);\n        },\n        getKeyAtDomPos: function getKeyAtDomPos(pos) {\n            return board.getKeyAtDomPos(pos, state.orientation === 'white', state.dom.bounds());\n        },\n        redrawAll: redrawAll,\n        dragNewPiece: function dragNewPiece(piece, event, force) {\n            drag_1.dragNewPiece(state, piece, event, force);\n        },\n        destroy: function destroy() {\n            board.stop(state);\n            state.dom.unbind && state.dom.unbind();\n            state.dom.destroyed = true;\n        }\n    };\n}\nexports.start = start;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar api_1 = __webpack_require__(12);\nvar config_1 = __webpack_require__(5);\nvar state_1 = __webpack_require__(18);\nvar wrap_1 = __webpack_require__(19);\nvar events = __webpack_require__(14);\nvar render_1 = __webpack_require__(17);\nvar svg = __webpack_require__(8);\nvar util = __webpack_require__(0);\nfunction Chessground(element, config) {\n    var state = state_1.defaults();\n    config_1.configure(state, config || {});\n    function redrawAll() {\n        var prevUnbind = state.dom && state.dom.unbind;\n        element.classList.add('cg-board-wrap');\n        var bounds = util.memo(function () {\n            return element.getBoundingClientRect();\n        });\n        var relative = state.viewOnly && !state.drawable.visible;\n        var elements = wrap_1.default(element, state, relative ? undefined : bounds());\n        var redrawNow = function redrawNow(skipSvg) {\n            render_1.default(state);\n            if (!skipSvg && elements.svg) svg.renderSvg(state, elements.svg);\n        };\n        state.dom = {\n            elements: elements,\n            bounds: bounds,\n            redraw: debounceRedraw(redrawNow),\n            redrawNow: redrawNow,\n            unbind: prevUnbind,\n            relative: relative\n        };\n        state.drawable.prevSvgHash = '';\n        redrawNow(false);\n        events.bindBoard(state);\n        if (!prevUnbind) state.dom.unbind = events.bindDocument(state, redrawAll);\n    }\n    redrawAll();\n    var api = api_1.start(state, redrawAll);\n    return api;\n}\nexports.Chessground = Chessground;\n;\nfunction debounceRedraw(redrawNow) {\n    var redrawing = false;\n    return function () {\n        if (redrawing) return;\n        redrawing = true;\n        util.raf(function () {\n            redrawNow();\n            redrawing = false;\n        });\n    };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NoZXNzZ3JvdW5kL2NoZXNzZ3JvdW5kLmpzPzM3ZjYiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJhcGlfMSIsInJlcXVpcmUiLCJjb25maWdfMSIsInN0YXRlXzEiLCJ3cmFwXzEiLCJldmVudHMiLCJyZW5kZXJfMSIsInN2ZyIsInV0aWwiLCJDaGVzc2dyb3VuZCIsImVsZW1lbnQiLCJjb25maWciLCJzdGF0ZSIsImRlZmF1bHRzIiwiY29uZmlndXJlIiwicmVkcmF3QWxsIiwicHJldlVuYmluZCIsImRvbSIsInVuYmluZCIsImNsYXNzTGlzdCIsImFkZCIsImJvdW5kcyIsIm1lbW8iLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyZWxhdGl2ZSIsInZpZXdPbmx5IiwiZHJhd2FibGUiLCJ2aXNpYmxlIiwiZWxlbWVudHMiLCJkZWZhdWx0IiwidW5kZWZpbmVkIiwicmVkcmF3Tm93Iiwic2tpcFN2ZyIsInJlbmRlclN2ZyIsInJlZHJhdyIsImRlYm91bmNlUmVkcmF3IiwicHJldlN2Z0hhc2giLCJiaW5kQm9hcmQiLCJiaW5kRG9jdW1lbnQiLCJhcGkiLCJzdGFydCIsInJlZHJhd2luZyIsInJhZiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0FBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBLElBQUlDLFFBQVEsbUJBQUFDLENBQVEsRUFBUixDQUFaO0FBQ0EsSUFBSUMsV0FBVyxtQkFBQUQsQ0FBUSxDQUFSLENBQWY7QUFDQSxJQUFJRSxVQUFVLG1CQUFBRixDQUFRLEVBQVIsQ0FBZDtBQUNBLElBQUlHLFNBQVMsbUJBQUFILENBQVEsRUFBUixDQUFiO0FBQ0EsSUFBSUksU0FBUyxtQkFBQUosQ0FBUSxFQUFSLENBQWI7QUFDQSxJQUFJSyxXQUFXLG1CQUFBTCxDQUFRLEVBQVIsQ0FBZjtBQUNBLElBQUlNLE1BQU0sbUJBQUFOLENBQVEsQ0FBUixDQUFWO0FBQ0EsSUFBSU8sT0FBTyxtQkFBQVAsQ0FBUSxDQUFSLENBQVg7QUFDQSxTQUFTUSxXQUFULENBQXFCQyxPQUFyQixFQUE4QkMsTUFBOUIsRUFBc0M7QUFDbEMsUUFBSUMsUUFBUVQsUUFBUVUsUUFBUixFQUFaO0FBQ0FYLGFBQVNZLFNBQVQsQ0FBbUJGLEtBQW5CLEVBQTBCRCxVQUFVLEVBQXBDO0FBQ0EsYUFBU0ksU0FBVCxHQUFxQjtBQUNqQixZQUFJQyxhQUFhSixNQUFNSyxHQUFOLElBQWFMLE1BQU1LLEdBQU4sQ0FBVUMsTUFBeEM7QUFDQVIsZ0JBQVFTLFNBQVIsQ0FBa0JDLEdBQWxCLENBQXNCLGVBQXRCO0FBQ0EsWUFBSUMsU0FBU2IsS0FBS2MsSUFBTCxDQUFVLFlBQVk7QUFBRSxtQkFBT1osUUFBUWEscUJBQVIsRUFBUDtBQUF5QyxTQUFqRSxDQUFiO0FBQ0EsWUFBSUMsV0FBV1osTUFBTWEsUUFBTixJQUFrQixDQUFDYixNQUFNYyxRQUFOLENBQWVDLE9BQWpEO0FBQ0EsWUFBSUMsV0FBV3hCLE9BQU95QixPQUFQLENBQWVuQixPQUFmLEVBQXdCRSxLQUF4QixFQUErQlksV0FBV00sU0FBWCxHQUF1QlQsUUFBdEQsQ0FBZjtBQUNBLFlBQUlVLFlBQVksU0FBWkEsU0FBWSxDQUFVQyxPQUFWLEVBQW1CO0FBQy9CMUIscUJBQVN1QixPQUFULENBQWlCakIsS0FBakI7QUFDQSxnQkFBSSxDQUFDb0IsT0FBRCxJQUFZSixTQUFTckIsR0FBekIsRUFDSUEsSUFBSTBCLFNBQUosQ0FBY3JCLEtBQWQsRUFBcUJnQixTQUFTckIsR0FBOUI7QUFDUCxTQUpEO0FBS0FLLGNBQU1LLEdBQU4sR0FBWTtBQUNSVyxzQkFBVUEsUUFERjtBQUVSUCxvQkFBUUEsTUFGQTtBQUdSYSxvQkFBUUMsZUFBZUosU0FBZixDQUhBO0FBSVJBLHVCQUFXQSxTQUpIO0FBS1JiLG9CQUFRRixVQUxBO0FBTVJRLHNCQUFVQTtBQU5GLFNBQVo7QUFRQVosY0FBTWMsUUFBTixDQUFlVSxXQUFmLEdBQTZCLEVBQTdCO0FBQ0FMLGtCQUFVLEtBQVY7QUFDQTFCLGVBQU9nQyxTQUFQLENBQWlCekIsS0FBakI7QUFDQSxZQUFJLENBQUNJLFVBQUwsRUFDSUosTUFBTUssR0FBTixDQUFVQyxNQUFWLEdBQW1CYixPQUFPaUMsWUFBUCxDQUFvQjFCLEtBQXBCLEVBQTJCRyxTQUEzQixDQUFuQjtBQUNQO0FBQ0RBO0FBQ0EsUUFBSXdCLE1BQU12QyxNQUFNd0MsS0FBTixDQUFZNUIsS0FBWixFQUFtQkcsU0FBbkIsQ0FBVjtBQUNBLFdBQU93QixHQUFQO0FBQ0g7QUFDRHpDLFFBQVFXLFdBQVIsR0FBc0JBLFdBQXRCO0FBQ0E7QUFDQSxTQUFTMEIsY0FBVCxDQUF3QkosU0FBeEIsRUFBbUM7QUFDL0IsUUFBSVUsWUFBWSxLQUFoQjtBQUNBLFdBQU8sWUFBWTtBQUNmLFlBQUlBLFNBQUosRUFDSTtBQUNKQSxvQkFBWSxJQUFaO0FBQ0FqQyxhQUFLa0MsR0FBTCxDQUFTLFlBQVk7QUFDakJYO0FBQ0FVLHdCQUFZLEtBQVo7QUFDSCxTQUhEO0FBSUgsS0FSRDtBQVNIIiwiZmlsZSI6IjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYXBpXzEgPSByZXF1aXJlKFwiLi9hcGlcIik7XG52YXIgY29uZmlnXzEgPSByZXF1aXJlKFwiLi9jb25maWdcIik7XG52YXIgc3RhdGVfMSA9IHJlcXVpcmUoXCIuL3N0YXRlXCIpO1xudmFyIHdyYXBfMSA9IHJlcXVpcmUoXCIuL3dyYXBcIik7XG52YXIgZXZlbnRzID0gcmVxdWlyZShcIi4vZXZlbnRzXCIpO1xudmFyIHJlbmRlcl8xID0gcmVxdWlyZShcIi4vcmVuZGVyXCIpO1xudmFyIHN2ZyA9IHJlcXVpcmUoXCIuL3N2Z1wiKTtcbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbmZ1bmN0aW9uIENoZXNzZ3JvdW5kKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIHZhciBzdGF0ZSA9IHN0YXRlXzEuZGVmYXVsdHMoKTtcbiAgICBjb25maWdfMS5jb25maWd1cmUoc3RhdGUsIGNvbmZpZyB8fCB7fSk7XG4gICAgZnVuY3Rpb24gcmVkcmF3QWxsKCkge1xuICAgICAgICB2YXIgcHJldlVuYmluZCA9IHN0YXRlLmRvbSAmJiBzdGF0ZS5kb20udW5iaW5kO1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2NnLWJvYXJkLXdyYXAnKTtcbiAgICAgICAgdmFyIGJvdW5kcyA9IHV0aWwubWVtbyhmdW5jdGlvbiAoKSB7IHJldHVybiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpOyB9KTtcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gc3RhdGUudmlld09ubHkgJiYgIXN0YXRlLmRyYXdhYmxlLnZpc2libGU7XG4gICAgICAgIHZhciBlbGVtZW50cyA9IHdyYXBfMS5kZWZhdWx0KGVsZW1lbnQsIHN0YXRlLCByZWxhdGl2ZSA/IHVuZGVmaW5lZCA6IGJvdW5kcygpKTtcbiAgICAgICAgdmFyIHJlZHJhd05vdyA9IGZ1bmN0aW9uIChza2lwU3ZnKSB7XG4gICAgICAgICAgICByZW5kZXJfMS5kZWZhdWx0KHN0YXRlKTtcbiAgICAgICAgICAgIGlmICghc2tpcFN2ZyAmJiBlbGVtZW50cy5zdmcpXG4gICAgICAgICAgICAgICAgc3ZnLnJlbmRlclN2ZyhzdGF0ZSwgZWxlbWVudHMuc3ZnKTtcbiAgICAgICAgfTtcbiAgICAgICAgc3RhdGUuZG9tID0ge1xuICAgICAgICAgICAgZWxlbWVudHM6IGVsZW1lbnRzLFxuICAgICAgICAgICAgYm91bmRzOiBib3VuZHMsXG4gICAgICAgICAgICByZWRyYXc6IGRlYm91bmNlUmVkcmF3KHJlZHJhd05vdyksXG4gICAgICAgICAgICByZWRyYXdOb3c6IHJlZHJhd05vdyxcbiAgICAgICAgICAgIHVuYmluZDogcHJldlVuYmluZCxcbiAgICAgICAgICAgIHJlbGF0aXZlOiByZWxhdGl2ZVxuICAgICAgICB9O1xuICAgICAgICBzdGF0ZS5kcmF3YWJsZS5wcmV2U3ZnSGFzaCA9ICcnO1xuICAgICAgICByZWRyYXdOb3coZmFsc2UpO1xuICAgICAgICBldmVudHMuYmluZEJvYXJkKHN0YXRlKTtcbiAgICAgICAgaWYgKCFwcmV2VW5iaW5kKVxuICAgICAgICAgICAgc3RhdGUuZG9tLnVuYmluZCA9IGV2ZW50cy5iaW5kRG9jdW1lbnQoc3RhdGUsIHJlZHJhd0FsbCk7XG4gICAgfVxuICAgIHJlZHJhd0FsbCgpO1xuICAgIHZhciBhcGkgPSBhcGlfMS5zdGFydChzdGF0ZSwgcmVkcmF3QWxsKTtcbiAgICByZXR1cm4gYXBpO1xufVxuZXhwb3J0cy5DaGVzc2dyb3VuZCA9IENoZXNzZ3JvdW5kO1xuO1xuZnVuY3Rpb24gZGVib3VuY2VSZWRyYXcocmVkcmF3Tm93KSB7XG4gICAgdmFyIHJlZHJhd2luZyA9IGZhbHNlO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChyZWRyYXdpbmcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHJlZHJhd2luZyA9IHRydWU7XG4gICAgICAgIHV0aWwucmFmKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlZHJhd05vdygpO1xuICAgICAgICAgICAgcmVkcmF3aW5nID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH07XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2NoZXNzZ3JvdW5kL2NoZXNzZ3JvdW5kLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar drag = __webpack_require__(6);\nvar draw = __webpack_require__(7);\nvar util_1 = __webpack_require__(0);\nfunction bindBoard(s) {\n    if (s.viewOnly) return;\n    var boardEl = s.dom.elements.board,\n        onStart = startDragOrDraw(s);\n    boardEl.addEventListener('touchstart', onStart);\n    boardEl.addEventListener('mousedown', onStart);\n    if (s.disableContextMenu || s.drawable.enabled) {\n        boardEl.addEventListener('contextmenu', function (e) {\n            return e.preventDefault();\n        });\n    }\n}\nexports.bindBoard = bindBoard;\nfunction bindDocument(s, redrawAll) {\n    var unbinds = [];\n    if (!s.dom.relative && s.resizable) {\n        var onResize = function onResize() {\n            s.dom.bounds.clear();\n            util_1.raf(redrawAll);\n        };\n        unbinds.push(unbindable(document.body, 'chessground.resize', onResize));\n    }\n    if (!s.viewOnly) {\n        var onmove_1 = dragOrDraw(s, drag.move, draw.move);\n        var onend_1 = dragOrDraw(s, drag.end, draw.end);\n        ['touchmove', 'mousemove'].forEach(function (ev) {\n            return unbinds.push(unbindable(document, ev, onmove_1));\n        });\n        ['touchend', 'mouseup'].forEach(function (ev) {\n            return unbinds.push(unbindable(document, ev, onend_1));\n        });\n        var onScroll = function onScroll() {\n            return s.dom.bounds.clear();\n        };\n        unbinds.push(unbindable(window, 'scroll', onScroll, { passive: true }));\n        unbinds.push(unbindable(window, 'resize', onScroll, { passive: true }));\n    }\n    return function () {\n        return unbinds.forEach(function (f) {\n            return f();\n        });\n    };\n}\nexports.bindDocument = bindDocument;\nfunction unbindable(el, eventName, callback, options) {\n    el.addEventListener(eventName, callback, options);\n    return function () {\n        return el.removeEventListener(eventName, callback);\n    };\n}\nfunction startDragOrDraw(s) {\n    return function (e) {\n        if (s.draggable.current) drag.cancel(s);else if (s.drawable.current) draw.cancel(s);else if (e.shiftKey || util_1.isRightButton(e)) {\n            if (s.drawable.enabled) draw.start(s, e);\n        } else if (!s.viewOnly) drag.start(s, e);\n    };\n}\nfunction dragOrDraw(s, withDrag, withDraw) {\n    return function (e) {\n        if (e.shiftKey || util_1.isRightButton(e)) {\n            if (s.drawable.enabled) withDraw(s, e);\n        } else if (!s.viewOnly) withDrag(s, e);\n    };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction explosion(state, keys) {\n    state.exploding = {\n        stage: 1,\n        keys: keys\n    };\n    state.dom.redraw();\n    setTimeout(function () {\n        setStage(state, 2);\n        setTimeout(function () {\n            return setStage(state, undefined);\n        }, 120);\n    }, 120);\n}\nexports.default = explosion;\nfunction setStage(state, stage) {\n    if (state.exploding) {\n        if (stage) state.exploding.stage = stage;else state.exploding = undefined;\n        state.dom.redraw();\n    }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NoZXNzZ3JvdW5kL2V4cGxvc2lvbi5qcz9jYjE4Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZXhwbG9zaW9uIiwic3RhdGUiLCJrZXlzIiwiZXhwbG9kaW5nIiwic3RhZ2UiLCJkb20iLCJyZWRyYXciLCJzZXRUaW1lb3V0Iiwic2V0U3RhZ2UiLCJ1bmRlZmluZWQiLCJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQUEsT0FBT0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkMsRUFBRUMsT0FBTyxJQUFULEVBQTdDO0FBQ0EsU0FBU0MsU0FBVCxDQUFtQkMsS0FBbkIsRUFBMEJDLElBQTFCLEVBQWdDO0FBQzVCRCxVQUFNRSxTQUFOLEdBQWtCO0FBQ2RDLGVBQU8sQ0FETztBQUVkRixjQUFNQTtBQUZRLEtBQWxCO0FBSUFELFVBQU1JLEdBQU4sQ0FBVUMsTUFBVjtBQUNBQyxlQUFXLFlBQVk7QUFDbkJDLGlCQUFTUCxLQUFULEVBQWdCLENBQWhCO0FBQ0FNLG1CQUFXLFlBQVk7QUFBRSxtQkFBT0MsU0FBU1AsS0FBVCxFQUFnQlEsU0FBaEIsQ0FBUDtBQUFvQyxTQUE3RCxFQUErRCxHQUEvRDtBQUNILEtBSEQsRUFHRyxHQUhIO0FBSUg7QUFDRFgsUUFBUVksT0FBUixHQUFrQlYsU0FBbEI7QUFDQSxTQUFTUSxRQUFULENBQWtCUCxLQUFsQixFQUF5QkcsS0FBekIsRUFBZ0M7QUFDNUIsUUFBSUgsTUFBTUUsU0FBVixFQUFxQjtBQUNqQixZQUFJQyxLQUFKLEVBQ0lILE1BQU1FLFNBQU4sQ0FBZ0JDLEtBQWhCLEdBQXdCQSxLQUF4QixDQURKLEtBR0lILE1BQU1FLFNBQU4sR0FBa0JNLFNBQWxCO0FBQ0pSLGNBQU1JLEdBQU4sQ0FBVUMsTUFBVjtBQUNIO0FBQ0oiLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGV4cGxvc2lvbihzdGF0ZSwga2V5cykge1xuICAgIHN0YXRlLmV4cGxvZGluZyA9IHtcbiAgICAgICAgc3RhZ2U6IDEsXG4gICAgICAgIGtleXM6IGtleXNcbiAgICB9O1xuICAgIHN0YXRlLmRvbS5yZWRyYXcoKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2V0U3RhZ2Uoc3RhdGUsIDIpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNldFN0YWdlKHN0YXRlLCB1bmRlZmluZWQpOyB9LCAxMjApO1xuICAgIH0sIDEyMCk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBleHBsb3Npb247XG5mdW5jdGlvbiBzZXRTdGFnZShzdGF0ZSwgc3RhZ2UpIHtcbiAgICBpZiAoc3RhdGUuZXhwbG9kaW5nKSB7XG4gICAgICAgIGlmIChzdGFnZSlcbiAgICAgICAgICAgIHN0YXRlLmV4cGxvZGluZy5zdGFnZSA9IHN0YWdlO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBzdGF0ZS5leHBsb2RpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIHN0YXRlLmRvbS5yZWRyYXcoKTtcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2NoZXNzZ3JvdW5kL2V4cGxvc2lvbi5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util = __webpack_require__(0);\nfunction diff(a, b) {\n    return Math.abs(a - b);\n}\nfunction pawn(color) {\n    return function (x1, y1, x2, y2) {\n        return diff(x1, x2) < 2 && (color === 'white' ? y2 === y1 + 1 || y1 <= 2 && y2 === y1 + 2 && x1 === x2 : y2 === y1 - 1 || y1 >= 7 && y2 === y1 - 2 && x1 === x2);\n    };\n}\nvar knight = function knight(x1, y1, x2, y2) {\n    var xd = diff(x1, x2);\n    var yd = diff(y1, y2);\n    return xd === 1 && yd === 2 || xd === 2 && yd === 1;\n};\nvar bishop = function bishop(x1, y1, x2, y2) {\n    return diff(x1, x2) === diff(y1, y2);\n};\nvar rook = function rook(x1, y1, x2, y2) {\n    return x1 === x2 || y1 === y2;\n};\nvar queen = function queen(x1, y1, x2, y2) {\n    return bishop(x1, y1, x2, y2) || rook(x1, y1, x2, y2);\n};\nfunction king(color, rookFiles, canCastle) {\n    return function (x1, y1, x2, y2) {\n        return diff(x1, x2) < 2 && diff(y1, y2) < 2 || canCastle && y1 === y2 && y1 === (color === 'white' ? 1 : 8) && (x1 === 5 && (x2 === 3 || x2 === 7) || util.containsX(rookFiles, x2));\n    };\n}\nfunction rookFilesOf(pieces, color) {\n    var piece;\n    return Object.keys(pieces).filter(function (key) {\n        piece = pieces[key];\n        return piece && piece.color === color && piece.role === 'rook';\n    }).map(function (key) {\n        return util.key2pos(key)[0];\n    });\n}\nfunction premove(pieces, key, canCastle) {\n    var piece = pieces[key],\n        pos = util.key2pos(key);\n    var mobility;\n    switch (piece.role) {\n        case 'pawn':\n            mobility = pawn(piece.color);\n            break;\n        case 'knight':\n            mobility = knight;\n            break;\n        case 'bishop':\n            mobility = bishop;\n            break;\n        case 'rook':\n            mobility = rook;\n            break;\n        case 'queen':\n            mobility = queen;\n            break;\n        case 'king':\n            mobility = king(piece.color, rookFilesOf(pieces, piece.color), canCastle);\n            break;\n    }\n    return util.allKeys.map(util.key2pos).filter(function (pos2) {\n        return (pos[0] !== pos2[0] || pos[1] !== pos2[1]) && mobility(pos[0], pos[1], pos2[0], pos2[1]);\n    }).map(util.pos2key);\n}\nexports.default = premove;\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NoZXNzZ3JvdW5kL3ByZW1vdmUuanM/ZmI0YSJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInV0aWwiLCJyZXF1aXJlIiwiZGlmZiIsImEiLCJiIiwiTWF0aCIsImFicyIsInBhd24iLCJjb2xvciIsIngxIiwieTEiLCJ4MiIsInkyIiwia25pZ2h0IiwieGQiLCJ5ZCIsImJpc2hvcCIsInJvb2siLCJxdWVlbiIsImtpbmciLCJyb29rRmlsZXMiLCJjYW5DYXN0bGUiLCJjb250YWluc1giLCJyb29rRmlsZXNPZiIsInBpZWNlcyIsInBpZWNlIiwia2V5cyIsImZpbHRlciIsImtleSIsInJvbGUiLCJtYXAiLCJrZXkycG9zIiwicHJlbW92ZSIsInBvcyIsIm1vYmlsaXR5IiwiYWxsS2V5cyIsInBvczIiLCJwb3Mya2V5IiwiZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0FBLE9BQU9DLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDLEVBQUVDLE9BQU8sSUFBVCxFQUE3QztBQUNBLElBQUlDLE9BQU8sbUJBQUFDLENBQVEsQ0FBUixDQUFYO0FBQ0EsU0FBU0MsSUFBVCxDQUFjQyxDQUFkLEVBQWlCQyxDQUFqQixFQUFvQjtBQUNoQixXQUFPQyxLQUFLQyxHQUFMLENBQVNILElBQUlDLENBQWIsQ0FBUDtBQUNIO0FBQ0QsU0FBU0csSUFBVCxDQUFjQyxLQUFkLEVBQXFCO0FBQ2pCLFdBQU8sVUFBVUMsRUFBVixFQUFjQyxFQUFkLEVBQWtCQyxFQUFsQixFQUFzQkMsRUFBdEIsRUFBMEI7QUFBRSxlQUFPVixLQUFLTyxFQUFMLEVBQVNFLEVBQVQsSUFBZSxDQUFmLEtBQXFCSCxVQUFVLE9BQVYsR0FBcUJJLE9BQU9GLEtBQUssQ0FBWixJQUFrQkEsTUFBTSxDQUFOLElBQVdFLE9BQVFGLEtBQUssQ0FBeEIsSUFBOEJELE9BQU9FLEVBQTVFLEdBQW9GQyxPQUFPRixLQUFLLENBQVosSUFBa0JBLE1BQU0sQ0FBTixJQUFXRSxPQUFRRixLQUFLLENBQXhCLElBQThCRCxPQUFPRSxFQUFoSyxDQUFQO0FBQStLLEtBQWxOO0FBQ0g7QUFDRCxJQUFJRSxTQUFTLFNBQVRBLE1BQVMsQ0FBVUosRUFBVixFQUFjQyxFQUFkLEVBQWtCQyxFQUFsQixFQUFzQkMsRUFBdEIsRUFBMEI7QUFDbkMsUUFBSUUsS0FBS1osS0FBS08sRUFBTCxFQUFTRSxFQUFULENBQVQ7QUFDQSxRQUFJSSxLQUFLYixLQUFLUSxFQUFMLEVBQVNFLEVBQVQsQ0FBVDtBQUNBLFdBQVFFLE9BQU8sQ0FBUCxJQUFZQyxPQUFPLENBQXBCLElBQTJCRCxPQUFPLENBQVAsSUFBWUMsT0FBTyxDQUFyRDtBQUNILENBSkQ7QUFLQSxJQUFJQyxTQUFTLFNBQVRBLE1BQVMsQ0FBVVAsRUFBVixFQUFjQyxFQUFkLEVBQWtCQyxFQUFsQixFQUFzQkMsRUFBdEIsRUFBMEI7QUFDbkMsV0FBT1YsS0FBS08sRUFBTCxFQUFTRSxFQUFULE1BQWlCVCxLQUFLUSxFQUFMLEVBQVNFLEVBQVQsQ0FBeEI7QUFDSCxDQUZEO0FBR0EsSUFBSUssT0FBTyxTQUFQQSxJQUFPLENBQVVSLEVBQVYsRUFBY0MsRUFBZCxFQUFrQkMsRUFBbEIsRUFBc0JDLEVBQXRCLEVBQTBCO0FBQ2pDLFdBQU9ILE9BQU9FLEVBQVAsSUFBYUQsT0FBT0UsRUFBM0I7QUFDSCxDQUZEO0FBR0EsSUFBSU0sUUFBUSxTQUFSQSxLQUFRLENBQVVULEVBQVYsRUFBY0MsRUFBZCxFQUFrQkMsRUFBbEIsRUFBc0JDLEVBQXRCLEVBQTBCO0FBQ2xDLFdBQU9JLE9BQU9QLEVBQVAsRUFBV0MsRUFBWCxFQUFlQyxFQUFmLEVBQW1CQyxFQUFuQixLQUEwQkssS0FBS1IsRUFBTCxFQUFTQyxFQUFULEVBQWFDLEVBQWIsRUFBaUJDLEVBQWpCLENBQWpDO0FBQ0gsQ0FGRDtBQUdBLFNBQVNPLElBQVQsQ0FBY1gsS0FBZCxFQUFxQlksU0FBckIsRUFBZ0NDLFNBQWhDLEVBQTJDO0FBQ3ZDLFdBQU8sVUFBVVosRUFBVixFQUFjQyxFQUFkLEVBQWtCQyxFQUFsQixFQUFzQkMsRUFBdEIsRUFBMEI7QUFBRSxlQUFRVixLQUFLTyxFQUFMLEVBQVNFLEVBQVQsSUFBZSxDQUFmLElBQW9CVCxLQUFLUSxFQUFMLEVBQVNFLEVBQVQsSUFBZSxDQUFwQyxJQUEyQ1MsYUFBYVgsT0FBT0UsRUFBcEIsSUFBMEJGLFFBQVFGLFVBQVUsT0FBVixHQUFvQixDQUFwQixHQUF3QixDQUFoQyxDQUExQixLQUFrRUMsT0FBTyxDQUFQLEtBQWFFLE9BQU8sQ0FBUCxJQUFZQSxPQUFPLENBQWhDLENBQUQsSUFBd0NYLEtBQUtzQixTQUFMLENBQWVGLFNBQWYsRUFBMEJULEVBQTFCLENBQXpHLENBQWxEO0FBQTZMLEtBQWhPO0FBQ0g7QUFDRCxTQUFTWSxXQUFULENBQXFCQyxNQUFyQixFQUE2QmhCLEtBQTdCLEVBQW9DO0FBQ2hDLFFBQUlpQixLQUFKO0FBQ0EsV0FBTzdCLE9BQU84QixJQUFQLENBQVlGLE1BQVosRUFBb0JHLE1BQXBCLENBQTJCLFVBQVVDLEdBQVYsRUFBZTtBQUM3Q0gsZ0JBQVFELE9BQU9JLEdBQVAsQ0FBUjtBQUNBLGVBQU9ILFNBQVNBLE1BQU1qQixLQUFOLEtBQWdCQSxLQUF6QixJQUFrQ2lCLE1BQU1JLElBQU4sS0FBZSxNQUF4RDtBQUNILEtBSE0sRUFHSkMsR0FISSxDQUdBLFVBQVVGLEdBQVYsRUFBZTtBQUFFLGVBQU81QixLQUFLK0IsT0FBTCxDQUFhSCxHQUFiLEVBQWtCLENBQWxCLENBQVA7QUFBOEIsS0FIL0MsQ0FBUDtBQUlIO0FBQ0QsU0FBU0ksT0FBVCxDQUFpQlIsTUFBakIsRUFBeUJJLEdBQXpCLEVBQThCUCxTQUE5QixFQUF5QztBQUNyQyxRQUFJSSxRQUFRRCxPQUFPSSxHQUFQLENBQVo7QUFBQSxRQUF5QkssTUFBTWpDLEtBQUsrQixPQUFMLENBQWFILEdBQWIsQ0FBL0I7QUFDQSxRQUFJTSxRQUFKO0FBQ0EsWUFBUVQsTUFBTUksSUFBZDtBQUNJLGFBQUssTUFBTDtBQUNJSyx1QkFBVzNCLEtBQUtrQixNQUFNakIsS0FBWCxDQUFYO0FBQ0E7QUFDSixhQUFLLFFBQUw7QUFDSTBCLHVCQUFXckIsTUFBWDtBQUNBO0FBQ0osYUFBSyxRQUFMO0FBQ0lxQix1QkFBV2xCLE1BQVg7QUFDQTtBQUNKLGFBQUssTUFBTDtBQUNJa0IsdUJBQVdqQixJQUFYO0FBQ0E7QUFDSixhQUFLLE9BQUw7QUFDSWlCLHVCQUFXaEIsS0FBWDtBQUNBO0FBQ0osYUFBSyxNQUFMO0FBQ0lnQix1QkFBV2YsS0FBS00sTUFBTWpCLEtBQVgsRUFBa0JlLFlBQVlDLE1BQVosRUFBb0JDLE1BQU1qQixLQUExQixDQUFsQixFQUFvRGEsU0FBcEQsQ0FBWDtBQUNBO0FBbEJSO0FBb0JBLFdBQU9yQixLQUFLbUMsT0FBTCxDQUFhTCxHQUFiLENBQWlCOUIsS0FBSytCLE9BQXRCLEVBQStCSixNQUEvQixDQUFzQyxVQUFVUyxJQUFWLEVBQWdCO0FBQ3pELGVBQU8sQ0FBQ0gsSUFBSSxDQUFKLE1BQVdHLEtBQUssQ0FBTCxDQUFYLElBQXNCSCxJQUFJLENBQUosTUFBV0csS0FBSyxDQUFMLENBQWxDLEtBQThDRixTQUFTRCxJQUFJLENBQUosQ0FBVCxFQUFpQkEsSUFBSSxDQUFKLENBQWpCLEVBQXlCRyxLQUFLLENBQUwsQ0FBekIsRUFBa0NBLEtBQUssQ0FBTCxDQUFsQyxDQUFyRDtBQUNILEtBRk0sRUFFSk4sR0FGSSxDQUVBOUIsS0FBS3FDLE9BRkwsQ0FBUDtBQUdIO0FBQ0R2QyxRQUFRd0MsT0FBUixHQUFrQk4sT0FBbEI7QUFDQSIsImZpbGUiOiIxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuZnVuY3Rpb24gZGlmZihhLCBiKSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKGEgLSBiKTtcbn1cbmZ1bmN0aW9uIHBhd24oY29sb3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHgxLCB5MSwgeDIsIHkyKSB7IHJldHVybiBkaWZmKHgxLCB4MikgPCAyICYmIChjb2xvciA9PT0gJ3doaXRlJyA/ICh5MiA9PT0geTEgKyAxIHx8ICh5MSA8PSAyICYmIHkyID09PSAoeTEgKyAyKSAmJiB4MSA9PT0geDIpKSA6ICh5MiA9PT0geTEgLSAxIHx8ICh5MSA+PSA3ICYmIHkyID09PSAoeTEgLSAyKSAmJiB4MSA9PT0geDIpKSk7IH07XG59XG52YXIga25pZ2h0ID0gZnVuY3Rpb24gKHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgdmFyIHhkID0gZGlmZih4MSwgeDIpO1xuICAgIHZhciB5ZCA9IGRpZmYoeTEsIHkyKTtcbiAgICByZXR1cm4gKHhkID09PSAxICYmIHlkID09PSAyKSB8fCAoeGQgPT09IDIgJiYgeWQgPT09IDEpO1xufTtcbnZhciBiaXNob3AgPSBmdW5jdGlvbiAoeDEsIHkxLCB4MiwgeTIpIHtcbiAgICByZXR1cm4gZGlmZih4MSwgeDIpID09PSBkaWZmKHkxLCB5Mik7XG59O1xudmFyIHJvb2sgPSBmdW5jdGlvbiAoeDEsIHkxLCB4MiwgeTIpIHtcbiAgICByZXR1cm4geDEgPT09IHgyIHx8IHkxID09PSB5Mjtcbn07XG52YXIgcXVlZW4gPSBmdW5jdGlvbiAoeDEsIHkxLCB4MiwgeTIpIHtcbiAgICByZXR1cm4gYmlzaG9wKHgxLCB5MSwgeDIsIHkyKSB8fCByb29rKHgxLCB5MSwgeDIsIHkyKTtcbn07XG5mdW5jdGlvbiBraW5nKGNvbG9yLCByb29rRmlsZXMsIGNhbkNhc3RsZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoeDEsIHkxLCB4MiwgeTIpIHsgcmV0dXJuIChkaWZmKHgxLCB4MikgPCAyICYmIGRpZmYoeTEsIHkyKSA8IDIpIHx8IChjYW5DYXN0bGUgJiYgeTEgPT09IHkyICYmIHkxID09PSAoY29sb3IgPT09ICd3aGl0ZScgPyAxIDogOCkgJiYgKCh4MSA9PT0gNSAmJiAoeDIgPT09IDMgfHwgeDIgPT09IDcpKSB8fCB1dGlsLmNvbnRhaW5zWChyb29rRmlsZXMsIHgyKSkpOyB9O1xufVxuZnVuY3Rpb24gcm9va0ZpbGVzT2YocGllY2VzLCBjb2xvcikge1xuICAgIHZhciBwaWVjZTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMocGllY2VzKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBwaWVjZSA9IHBpZWNlc1trZXldO1xuICAgICAgICByZXR1cm4gcGllY2UgJiYgcGllY2UuY29sb3IgPT09IGNvbG9yICYmIHBpZWNlLnJvbGUgPT09ICdyb29rJztcbiAgICB9KS5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gdXRpbC5rZXkycG9zKGtleSlbMF07IH0pO1xufVxuZnVuY3Rpb24gcHJlbW92ZShwaWVjZXMsIGtleSwgY2FuQ2FzdGxlKSB7XG4gICAgdmFyIHBpZWNlID0gcGllY2VzW2tleV0sIHBvcyA9IHV0aWwua2V5MnBvcyhrZXkpO1xuICAgIHZhciBtb2JpbGl0eTtcbiAgICBzd2l0Y2ggKHBpZWNlLnJvbGUpIHtcbiAgICAgICAgY2FzZSAncGF3bic6XG4gICAgICAgICAgICBtb2JpbGl0eSA9IHBhd24ocGllY2UuY29sb3IpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2tuaWdodCc6XG4gICAgICAgICAgICBtb2JpbGl0eSA9IGtuaWdodDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdiaXNob3AnOlxuICAgICAgICAgICAgbW9iaWxpdHkgPSBiaXNob3A7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncm9vayc6XG4gICAgICAgICAgICBtb2JpbGl0eSA9IHJvb2s7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncXVlZW4nOlxuICAgICAgICAgICAgbW9iaWxpdHkgPSBxdWVlbjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdraW5nJzpcbiAgICAgICAgICAgIG1vYmlsaXR5ID0ga2luZyhwaWVjZS5jb2xvciwgcm9va0ZpbGVzT2YocGllY2VzLCBwaWVjZS5jb2xvciksIGNhbkNhc3RsZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHV0aWwuYWxsS2V5cy5tYXAodXRpbC5rZXkycG9zKS5maWx0ZXIoZnVuY3Rpb24gKHBvczIpIHtcbiAgICAgICAgcmV0dXJuIChwb3NbMF0gIT09IHBvczJbMF0gfHwgcG9zWzFdICE9PSBwb3MyWzFdKSAmJiBtb2JpbGl0eShwb3NbMF0sIHBvc1sxXSwgcG9zMlswXSwgcG9zMlsxXSk7XG4gICAgfSkubWFwKHV0aWwucG9zMmtleSk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBwcmVtb3ZlO1xuO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9jaGVzc2dyb3VuZC9wcmVtb3ZlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = __webpack_require__(0);\nvar util = __webpack_require__(0);\nfunction render(s) {\n    var asWhite = s.orientation === 'white',\n        posToTranslate = s.dom.relative ? util.posToTranslateRel : util.posToTranslateAbs(s.dom.bounds()),\n        translate = s.dom.relative ? util.translateRel : util.translateAbs,\n        boardEl = s.dom.elements.board,\n        pieces = s.pieces,\n        curAnim = s.animation.current,\n        anims = curAnim ? curAnim.plan.anims : {},\n        fadings = curAnim ? curAnim.plan.fadings : {},\n        curDrag = s.draggable.current,\n        squares = computeSquareClasses(s),\n        samePieces = {},\n        sameSquares = {},\n        movedPieces = {},\n        movedSquares = {},\n        piecesKeys = Object.keys(pieces);\n    var k, p, el, pieceAtKey, elPieceName, anim, fading, pMvdset, pMvd, sMvdset, sMvd;\n    el = boardEl.firstChild;\n    while (el) {\n        k = el.cgKey;\n        if (isPieceNode(el)) {\n            pieceAtKey = pieces[k];\n            anim = anims[k];\n            fading = fadings[k];\n            elPieceName = el.cgPiece;\n            if (el.cgDragging && (!curDrag || curDrag.orig !== k)) {\n                el.classList.remove('dragging');\n                translate(el, posToTranslate(util_1.key2pos(k), asWhite));\n                el.cgDragging = false;\n            }\n            if (!fading && el.cgFading) {\n                el.cgFading = false;\n                el.classList.remove('fading');\n            }\n            if (pieceAtKey) {\n                if (anim && el.cgAnimating && elPieceName === pieceNameOf(pieceAtKey)) {\n                    var pos = util_1.key2pos(k);\n                    pos[0] += anim[2];\n                    pos[1] += anim[3];\n                    el.classList.add('anim');\n                    translate(el, posToTranslate(pos, asWhite));\n                } else if (el.cgAnimating) {\n                    el.cgAnimating = false;\n                    el.classList.remove('anim');\n                    translate(el, posToTranslate(util_1.key2pos(k), asWhite));\n                    if (s.addPieceZIndex) el.style.zIndex = posZIndex(util_1.key2pos(k), asWhite);\n                }\n                if (elPieceName === pieceNameOf(pieceAtKey) && (!fading || !el.cgFading)) {\n                    samePieces[k] = true;\n                } else {\n                    if (fading && elPieceName === pieceNameOf(fading)) {\n                        el.classList.add('fading');\n                        el.cgFading = true;\n                    } else {\n                        if (movedPieces[elPieceName]) movedPieces[elPieceName].push(el);else movedPieces[elPieceName] = [el];\n                    }\n                }\n            } else {\n                if (movedPieces[elPieceName]) movedPieces[elPieceName].push(el);else movedPieces[elPieceName] = [el];\n            }\n        } else if (isSquareNode(el)) {\n            var cn = el.className;\n            if (squares[k] === cn) sameSquares[k] = true;else if (movedSquares[cn]) movedSquares[cn].push(el);else movedSquares[cn] = [el];\n        }\n        el = el.nextSibling;\n    }\n    for (var sk in squares) {\n        if (!sameSquares[sk]) {\n            sMvdset = movedSquares[squares[sk]];\n            sMvd = sMvdset && sMvdset.pop();\n            var translation = posToTranslate(util_1.key2pos(sk), asWhite);\n            if (sMvd) {\n                sMvd.cgKey = sk;\n                translate(sMvd, translation);\n            } else {\n                var squareNode = util_1.createEl('square', squares[sk]);\n                squareNode.cgKey = sk;\n                translate(squareNode, translation);\n                boardEl.insertBefore(squareNode, boardEl.firstChild);\n            }\n        }\n    }\n    for (var j in piecesKeys) {\n        k = piecesKeys[j];\n        p = pieces[k];\n        anim = anims[k];\n        if (!samePieces[k]) {\n            pMvdset = movedPieces[pieceNameOf(p)];\n            pMvd = pMvdset && pMvdset.pop();\n            if (pMvd) {\n                pMvd.cgKey = k;\n                if (pMvd.cgFading) {\n                    pMvd.classList.remove('fading');\n                    pMvd.cgFading = false;\n                }\n                var pos = util_1.key2pos(k);\n                if (s.addPieceZIndex) pMvd.style.zIndex = posZIndex(pos, asWhite);\n                if (anim) {\n                    pMvd.cgAnimating = true;\n                    pMvd.classList.add('anim');\n                    pos[0] += anim[2];\n                    pos[1] += anim[3];\n                }\n                translate(pMvd, posToTranslate(pos, asWhite));\n            } else {\n                var pieceName = pieceNameOf(p),\n                    pieceNode = util_1.createEl('piece', pieceName),\n                    pos = util_1.key2pos(k);\n                pieceNode.cgPiece = pieceName;\n                pieceNode.cgKey = k;\n                if (anim) {\n                    pieceNode.cgAnimating = true;\n                    pos[0] += anim[2];\n                    pos[1] += anim[3];\n                }\n                translate(pieceNode, posToTranslate(pos, asWhite));\n                if (s.addPieceZIndex) pieceNode.style.zIndex = posZIndex(pos, asWhite);\n                boardEl.appendChild(pieceNode);\n            }\n        }\n    }\n    for (var i in movedPieces) {\n        removeNodes(s, movedPieces[i]);\n    }for (var i in movedSquares) {\n        removeNodes(s, movedSquares[i]);\n    }\n}\nexports.default = render;\nfunction isPieceNode(el) {\n    return el.tagName === 'PIECE';\n}\nfunction isSquareNode(el) {\n    return el.tagName === 'SQUARE';\n}\nfunction removeNodes(s, nodes) {\n    for (var i in nodes) {\n        s.dom.elements.board.removeChild(nodes[i]);\n    }\n}\nfunction posZIndex(pos, asWhite) {\n    var z = 2 + (pos[1] - 1) * 8 + (8 - pos[0]);\n    if (asWhite) z = 67 - z;\n    return z + '';\n}\nfunction pieceNameOf(piece) {\n    return piece.color + \" \" + piece.role;\n}\nfunction computeSquareClasses(s) {\n    var squares = {};\n    var i, k;\n    if (s.lastMove && s.highlight.lastMove) for (i in s.lastMove) {\n        addSquare(squares, s.lastMove[i], 'last-move');\n    }\n    if (s.check && s.highlight.check) addSquare(squares, s.check, 'check');\n    if (s.selected) {\n        addSquare(squares, s.selected, 'selected');\n        if (s.movable.showDests) {\n            var dests = s.movable.dests && s.movable.dests[s.selected];\n            if (dests) for (i in dests) {\n                k = dests[i];\n                addSquare(squares, k, 'move-dest' + (s.pieces[k] ? ' oc' : ''));\n            }\n            var pDests = s.premovable.dests;\n            if (pDests) for (i in pDests) {\n                k = pDests[i];\n                addSquare(squares, k, 'premove-dest' + (s.pieces[k] ? ' oc' : ''));\n            }\n        }\n    }\n    var premove = s.premovable.current;\n    if (premove) for (i in premove) {\n        addSquare(squares, premove[i], 'current-premove');\n    } else if (s.predroppable.current) addSquare(squares, s.predroppable.current.key, 'current-premove');\n    var o = s.exploding;\n    if (o) for (i in o.keys) {\n        addSquare(squares, o.keys[i], 'exploding' + o.stage);\n    }return squares;\n}\nfunction addSquare(squares, key, klass) {\n    if (squares[key]) squares[key] += ' ' + klass;else squares[key] = klass;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar fen = __webpack_require__(2);\nvar util_1 = __webpack_require__(0);\nfunction defaults() {\n    return {\n        pieces: fen.read(fen.initial),\n        orientation: 'white',\n        turnColor: 'white',\n        coordinates: true,\n        autoCastle: true,\n        viewOnly: false,\n        disableContextMenu: false,\n        resizable: true,\n        addPieceZIndex: false,\n        pieceKey: false,\n        highlight: {\n            lastMove: true,\n            check: true\n        },\n        animation: {\n            enabled: true,\n            duration: 200\n        },\n        movable: {\n            free: true,\n            color: 'both',\n            showDests: true,\n            events: {},\n            rookCastle: true\n        },\n        premovable: {\n            enabled: true,\n            showDests: true,\n            castle: true,\n            events: {}\n        },\n        predroppable: {\n            enabled: false,\n            events: {}\n        },\n        draggable: {\n            enabled: true,\n            distance: 3,\n            autoDistance: true,\n            centerPiece: true,\n            showGhost: true,\n            deleteOnDropOff: false\n        },\n        selectable: {\n            enabled: true\n        },\n        stats: {\n            dragged: !('ontouchstart' in window)\n        },\n        events: {},\n        drawable: {\n            enabled: true,\n            visible: true,\n            eraseOnClick: true,\n            shapes: [],\n            autoShapes: [],\n            brushes: {\n                green: { key: 'g', color: '#15781B', opacity: 1, lineWidth: 10 },\n                red: { key: 'r', color: '#882020', opacity: 1, lineWidth: 10 },\n                blue: { key: 'b', color: '#003088', opacity: 1, lineWidth: 10 },\n                yellow: { key: 'y', color: '#e68f00', opacity: 1, lineWidth: 10 },\n                paleBlue: { key: 'pb', color: '#003088', opacity: 0.4, lineWidth: 15 },\n                paleGreen: { key: 'pg', color: '#15781B', opacity: 0.4, lineWidth: 15 },\n                paleRed: { key: 'pr', color: '#882020', opacity: 0.4, lineWidth: 15 },\n                paleGrey: { key: 'pgr', color: '#4a4a4a', opacity: 0.35, lineWidth: 15 }\n            },\n            pieces: {\n                baseUrl: 'https://lichess1.org/assets/piece/cburnett/'\n            },\n            prevSvgHash: ''\n        },\n        hold: util_1.timer()\n    };\n}\nexports.defaults = defaults;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NoZXNzZ3JvdW5kL3N0YXRlLmpzPzVlNzUiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmZW4iLCJyZXF1aXJlIiwidXRpbF8xIiwiZGVmYXVsdHMiLCJwaWVjZXMiLCJyZWFkIiwiaW5pdGlhbCIsIm9yaWVudGF0aW9uIiwidHVybkNvbG9yIiwiY29vcmRpbmF0ZXMiLCJhdXRvQ2FzdGxlIiwidmlld09ubHkiLCJkaXNhYmxlQ29udGV4dE1lbnUiLCJyZXNpemFibGUiLCJhZGRQaWVjZVpJbmRleCIsInBpZWNlS2V5IiwiaGlnaGxpZ2h0IiwibGFzdE1vdmUiLCJjaGVjayIsImFuaW1hdGlvbiIsImVuYWJsZWQiLCJkdXJhdGlvbiIsIm1vdmFibGUiLCJmcmVlIiwiY29sb3IiLCJzaG93RGVzdHMiLCJldmVudHMiLCJyb29rQ2FzdGxlIiwicHJlbW92YWJsZSIsImNhc3RsZSIsInByZWRyb3BwYWJsZSIsImRyYWdnYWJsZSIsImRpc3RhbmNlIiwiYXV0b0Rpc3RhbmNlIiwiY2VudGVyUGllY2UiLCJzaG93R2hvc3QiLCJkZWxldGVPbkRyb3BPZmYiLCJzZWxlY3RhYmxlIiwic3RhdHMiLCJkcmFnZ2VkIiwid2luZG93IiwiZHJhd2FibGUiLCJ2aXNpYmxlIiwiZXJhc2VPbkNsaWNrIiwic2hhcGVzIiwiYXV0b1NoYXBlcyIsImJydXNoZXMiLCJncmVlbiIsImtleSIsIm9wYWNpdHkiLCJsaW5lV2lkdGgiLCJyZWQiLCJibHVlIiwieWVsbG93IiwicGFsZUJsdWUiLCJwYWxlR3JlZW4iLCJwYWxlUmVkIiwicGFsZUdyZXkiLCJiYXNlVXJsIiwicHJldlN2Z0hhc2giLCJob2xkIiwidGltZXIiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFQyxPQUFPLElBQVQsRUFBN0M7QUFDQSxJQUFJQyxNQUFNLG1CQUFBQyxDQUFRLENBQVIsQ0FBVjtBQUNBLElBQUlDLFNBQVMsbUJBQUFELENBQVEsQ0FBUixDQUFiO0FBQ0EsU0FBU0UsUUFBVCxHQUFvQjtBQUNoQixXQUFPO0FBQ0hDLGdCQUFRSixJQUFJSyxJQUFKLENBQVNMLElBQUlNLE9BQWIsQ0FETDtBQUVIQyxxQkFBYSxPQUZWO0FBR0hDLG1CQUFXLE9BSFI7QUFJSEMscUJBQWEsSUFKVjtBQUtIQyxvQkFBWSxJQUxUO0FBTUhDLGtCQUFVLEtBTlA7QUFPSEMsNEJBQW9CLEtBUGpCO0FBUUhDLG1CQUFXLElBUlI7QUFTSEMsd0JBQWdCLEtBVGI7QUFVSEMsa0JBQVUsS0FWUDtBQVdIQyxtQkFBVztBQUNQQyxzQkFBVSxJQURIO0FBRVBDLG1CQUFPO0FBRkEsU0FYUjtBQWVIQyxtQkFBVztBQUNQQyxxQkFBUyxJQURGO0FBRVBDLHNCQUFVO0FBRkgsU0FmUjtBQW1CSEMsaUJBQVM7QUFDTEMsa0JBQU0sSUFERDtBQUVMQyxtQkFBTyxNQUZGO0FBR0xDLHVCQUFXLElBSE47QUFJTEMsb0JBQVEsRUFKSDtBQUtMQyx3QkFBWTtBQUxQLFNBbkJOO0FBMEJIQyxvQkFBWTtBQUNSUixxQkFBUyxJQUREO0FBRVJLLHVCQUFXLElBRkg7QUFHUkksb0JBQVEsSUFIQTtBQUlSSCxvQkFBUTtBQUpBLFNBMUJUO0FBZ0NISSxzQkFBYztBQUNWVixxQkFBUyxLQURDO0FBRVZNLG9CQUFRO0FBRkUsU0FoQ1g7QUFvQ0hLLG1CQUFXO0FBQ1BYLHFCQUFTLElBREY7QUFFUFksc0JBQVUsQ0FGSDtBQUdQQywwQkFBYyxJQUhQO0FBSVBDLHlCQUFhLElBSk47QUFLUEMsdUJBQVcsSUFMSjtBQU1QQyw2QkFBaUI7QUFOVixTQXBDUjtBQTRDSEMsb0JBQVk7QUFDUmpCLHFCQUFTO0FBREQsU0E1Q1Q7QUErQ0hrQixlQUFPO0FBQ0hDLHFCQUFTLEVBQUUsa0JBQWtCQyxNQUFwQjtBQUROLFNBL0NKO0FBa0RIZCxnQkFBUSxFQWxETDtBQW1ESGUsa0JBQVU7QUFDTnJCLHFCQUFTLElBREg7QUFFTnNCLHFCQUFTLElBRkg7QUFHTkMsMEJBQWMsSUFIUjtBQUlOQyxvQkFBUSxFQUpGO0FBS05DLHdCQUFZLEVBTE47QUFNTkMscUJBQVM7QUFDTEMsdUJBQU8sRUFBRUMsS0FBSyxHQUFQLEVBQVl4QixPQUFPLFNBQW5CLEVBQThCeUIsU0FBUyxDQUF2QyxFQUEwQ0MsV0FBVyxFQUFyRCxFQURGO0FBRUxDLHFCQUFLLEVBQUVILEtBQUssR0FBUCxFQUFZeEIsT0FBTyxTQUFuQixFQUE4QnlCLFNBQVMsQ0FBdkMsRUFBMENDLFdBQVcsRUFBckQsRUFGQTtBQUdMRSxzQkFBTSxFQUFFSixLQUFLLEdBQVAsRUFBWXhCLE9BQU8sU0FBbkIsRUFBOEJ5QixTQUFTLENBQXZDLEVBQTBDQyxXQUFXLEVBQXJELEVBSEQ7QUFJTEcsd0JBQVEsRUFBRUwsS0FBSyxHQUFQLEVBQVl4QixPQUFPLFNBQW5CLEVBQThCeUIsU0FBUyxDQUF2QyxFQUEwQ0MsV0FBVyxFQUFyRCxFQUpIO0FBS0xJLDBCQUFVLEVBQUVOLEtBQUssSUFBUCxFQUFheEIsT0FBTyxTQUFwQixFQUErQnlCLFNBQVMsR0FBeEMsRUFBNkNDLFdBQVcsRUFBeEQsRUFMTDtBQU1MSywyQkFBVyxFQUFFUCxLQUFLLElBQVAsRUFBYXhCLE9BQU8sU0FBcEIsRUFBK0J5QixTQUFTLEdBQXhDLEVBQTZDQyxXQUFXLEVBQXhELEVBTk47QUFPTE0seUJBQVMsRUFBRVIsS0FBSyxJQUFQLEVBQWF4QixPQUFPLFNBQXBCLEVBQStCeUIsU0FBUyxHQUF4QyxFQUE2Q0MsV0FBVyxFQUF4RCxFQVBKO0FBUUxPLDBCQUFVLEVBQUVULEtBQUssS0FBUCxFQUFjeEIsT0FBTyxTQUFyQixFQUFnQ3lCLFNBQVMsSUFBekMsRUFBK0NDLFdBQVcsRUFBMUQ7QUFSTCxhQU5IO0FBZ0JOOUMsb0JBQVE7QUFDSnNELHlCQUFTO0FBREwsYUFoQkY7QUFtQk5DLHlCQUFhO0FBbkJQLFNBbkRQO0FBd0VIQyxjQUFNMUQsT0FBTzJELEtBQVA7QUF4RUgsS0FBUDtBQTBFSDtBQUNEL0QsUUFBUUssUUFBUixHQUFtQkEsUUFBbkIiLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBmZW4gPSByZXF1aXJlKFwiLi9mZW5cIik7XG52YXIgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbmZ1bmN0aW9uIGRlZmF1bHRzKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHBpZWNlczogZmVuLnJlYWQoZmVuLmluaXRpYWwpLFxuICAgICAgICBvcmllbnRhdGlvbjogJ3doaXRlJyxcbiAgICAgICAgdHVybkNvbG9yOiAnd2hpdGUnLFxuICAgICAgICBjb29yZGluYXRlczogdHJ1ZSxcbiAgICAgICAgYXV0b0Nhc3RsZTogdHJ1ZSxcbiAgICAgICAgdmlld09ubHk6IGZhbHNlLFxuICAgICAgICBkaXNhYmxlQ29udGV4dE1lbnU6IGZhbHNlLFxuICAgICAgICByZXNpemFibGU6IHRydWUsXG4gICAgICAgIGFkZFBpZWNlWkluZGV4OiBmYWxzZSxcbiAgICAgICAgcGllY2VLZXk6IGZhbHNlLFxuICAgICAgICBoaWdobGlnaHQ6IHtcbiAgICAgICAgICAgIGxhc3RNb3ZlOiB0cnVlLFxuICAgICAgICAgICAgY2hlY2s6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgYW5pbWF0aW9uOiB7XG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgZHVyYXRpb246IDIwMFxuICAgICAgICB9LFxuICAgICAgICBtb3ZhYmxlOiB7XG4gICAgICAgICAgICBmcmVlOiB0cnVlLFxuICAgICAgICAgICAgY29sb3I6ICdib3RoJyxcbiAgICAgICAgICAgIHNob3dEZXN0czogdHJ1ZSxcbiAgICAgICAgICAgIGV2ZW50czoge30sXG4gICAgICAgICAgICByb29rQ2FzdGxlOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHByZW1vdmFibGU6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICBzaG93RGVzdHM6IHRydWUsXG4gICAgICAgICAgICBjYXN0bGU6IHRydWUsXG4gICAgICAgICAgICBldmVudHM6IHt9XG4gICAgICAgIH0sXG4gICAgICAgIHByZWRyb3BwYWJsZToge1xuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgICBldmVudHM6IHt9XG4gICAgICAgIH0sXG4gICAgICAgIGRyYWdnYWJsZToge1xuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgIGRpc3RhbmNlOiAzLFxuICAgICAgICAgICAgYXV0b0Rpc3RhbmNlOiB0cnVlLFxuICAgICAgICAgICAgY2VudGVyUGllY2U6IHRydWUsXG4gICAgICAgICAgICBzaG93R2hvc3Q6IHRydWUsXG4gICAgICAgICAgICBkZWxldGVPbkRyb3BPZmY6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHNlbGVjdGFibGU6IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgc3RhdHM6IHtcbiAgICAgICAgICAgIGRyYWdnZWQ6ICEoJ29udG91Y2hzdGFydCcgaW4gd2luZG93KVxuICAgICAgICB9LFxuICAgICAgICBldmVudHM6IHt9LFxuICAgICAgICBkcmF3YWJsZToge1xuICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgICAgICBlcmFzZU9uQ2xpY2s6IHRydWUsXG4gICAgICAgICAgICBzaGFwZXM6IFtdLFxuICAgICAgICAgICAgYXV0b1NoYXBlczogW10sXG4gICAgICAgICAgICBicnVzaGVzOiB7XG4gICAgICAgICAgICAgICAgZ3JlZW46IHsga2V5OiAnZycsIGNvbG9yOiAnIzE1NzgxQicsIG9wYWNpdHk6IDEsIGxpbmVXaWR0aDogMTAgfSxcbiAgICAgICAgICAgICAgICByZWQ6IHsga2V5OiAncicsIGNvbG9yOiAnIzg4MjAyMCcsIG9wYWNpdHk6IDEsIGxpbmVXaWR0aDogMTAgfSxcbiAgICAgICAgICAgICAgICBibHVlOiB7IGtleTogJ2InLCBjb2xvcjogJyMwMDMwODgnLCBvcGFjaXR5OiAxLCBsaW5lV2lkdGg6IDEwIH0sXG4gICAgICAgICAgICAgICAgeWVsbG93OiB7IGtleTogJ3knLCBjb2xvcjogJyNlNjhmMDAnLCBvcGFjaXR5OiAxLCBsaW5lV2lkdGg6IDEwIH0sXG4gICAgICAgICAgICAgICAgcGFsZUJsdWU6IHsga2V5OiAncGInLCBjb2xvcjogJyMwMDMwODgnLCBvcGFjaXR5OiAwLjQsIGxpbmVXaWR0aDogMTUgfSxcbiAgICAgICAgICAgICAgICBwYWxlR3JlZW46IHsga2V5OiAncGcnLCBjb2xvcjogJyMxNTc4MUInLCBvcGFjaXR5OiAwLjQsIGxpbmVXaWR0aDogMTUgfSxcbiAgICAgICAgICAgICAgICBwYWxlUmVkOiB7IGtleTogJ3ByJywgY29sb3I6ICcjODgyMDIwJywgb3BhY2l0eTogMC40LCBsaW5lV2lkdGg6IDE1IH0sXG4gICAgICAgICAgICAgICAgcGFsZUdyZXk6IHsga2V5OiAncGdyJywgY29sb3I6ICcjNGE0YTRhJywgb3BhY2l0eTogMC4zNSwgbGluZVdpZHRoOiAxNSB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGllY2VzOiB7XG4gICAgICAgICAgICAgICAgYmFzZVVybDogJ2h0dHBzOi8vbGljaGVzczEub3JnL2Fzc2V0cy9waWVjZS9jYnVybmV0dC8nXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJldlN2Z0hhc2g6ICcnXG4gICAgICAgIH0sXG4gICAgICAgIGhvbGQ6IHV0aWxfMS50aW1lcigpXG4gICAgfTtcbn1cbmV4cG9ydHMuZGVmYXVsdHMgPSBkZWZhdWx0cztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vY2hlc3Nncm91bmQvc3RhdGUuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = __webpack_require__(0);\nvar types_1 = __webpack_require__(3);\nvar svg_1 = __webpack_require__(8);\nfunction wrap(element, s, bounds) {\n    element.innerHTML = '';\n    element.classList.add('cg-board-wrap');\n    util_1.colors.forEach(function (c) {\n        element.classList.toggle('orientation-' + c, s.orientation === c);\n    });\n    element.classList.toggle('manipulable', !s.viewOnly);\n    var board = util_1.createEl('div', 'cg-board');\n    element.appendChild(board);\n    var svg;\n    if (s.drawable.visible && bounds) {\n        svg = svg_1.createElement('svg');\n        svg.appendChild(svg_1.createElement('defs'));\n        element.appendChild(svg);\n    }\n    if (s.coordinates) {\n        var orientClass = s.orientation === 'black' ? ' black' : '';\n        element.appendChild(renderCoords(types_1.ranks, 'ranks' + orientClass));\n        element.appendChild(renderCoords(types_1.files, 'files' + orientClass));\n    }\n    var ghost;\n    if (bounds && s.draggable.showGhost) {\n        ghost = util_1.createEl('piece', 'ghost');\n        util_1.setVisible(ghost, false);\n        element.appendChild(ghost);\n    }\n    return {\n        board: board,\n        ghost: ghost,\n        svg: svg\n    };\n}\nexports.default = wrap;\nfunction renderCoords(elems, className) {\n    var el = util_1.createEl('coords', className);\n    var f;\n    for (var i in elems) {\n        f = util_1.createEl('coord');\n        f.textContent = elems[i];\n        el.appendChild(f);\n    }\n    return el;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2NoZXNzZ3JvdW5kL3dyYXAuanM/NjM4NSJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInV0aWxfMSIsInJlcXVpcmUiLCJ0eXBlc18xIiwic3ZnXzEiLCJ3cmFwIiwiZWxlbWVudCIsInMiLCJib3VuZHMiLCJpbm5lckhUTUwiLCJjbGFzc0xpc3QiLCJhZGQiLCJjb2xvcnMiLCJmb3JFYWNoIiwiYyIsInRvZ2dsZSIsIm9yaWVudGF0aW9uIiwidmlld09ubHkiLCJib2FyZCIsImNyZWF0ZUVsIiwiYXBwZW5kQ2hpbGQiLCJzdmciLCJkcmF3YWJsZSIsInZpc2libGUiLCJjcmVhdGVFbGVtZW50IiwiY29vcmRpbmF0ZXMiLCJvcmllbnRDbGFzcyIsInJlbmRlckNvb3JkcyIsInJhbmtzIiwiZmlsZXMiLCJnaG9zdCIsImRyYWdnYWJsZSIsInNob3dHaG9zdCIsInNldFZpc2libGUiLCJkZWZhdWx0IiwiZWxlbXMiLCJjbGFzc05hbWUiLCJlbCIsImYiLCJpIiwidGV4dENvbnRlbnQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QyxFQUFFQyxPQUFPLElBQVQsRUFBN0M7QUFDQSxJQUFJQyxTQUFTLG1CQUFBQyxDQUFRLENBQVIsQ0FBYjtBQUNBLElBQUlDLFVBQVUsbUJBQUFELENBQVEsQ0FBUixDQUFkO0FBQ0EsSUFBSUUsUUFBUSxtQkFBQUYsQ0FBUSxDQUFSLENBQVo7QUFDQSxTQUFTRyxJQUFULENBQWNDLE9BQWQsRUFBdUJDLENBQXZCLEVBQTBCQyxNQUExQixFQUFrQztBQUM5QkYsWUFBUUcsU0FBUixHQUFvQixFQUFwQjtBQUNBSCxZQUFRSSxTQUFSLENBQWtCQyxHQUFsQixDQUFzQixlQUF0QjtBQUNBVixXQUFPVyxNQUFQLENBQWNDLE9BQWQsQ0FBc0IsVUFBVUMsQ0FBVixFQUFhO0FBQy9CUixnQkFBUUksU0FBUixDQUFrQkssTUFBbEIsQ0FBeUIsaUJBQWlCRCxDQUExQyxFQUE2Q1AsRUFBRVMsV0FBRixLQUFrQkYsQ0FBL0Q7QUFDSCxLQUZEO0FBR0FSLFlBQVFJLFNBQVIsQ0FBa0JLLE1BQWxCLENBQXlCLGFBQXpCLEVBQXdDLENBQUNSLEVBQUVVLFFBQTNDO0FBQ0EsUUFBSUMsUUFBUWpCLE9BQU9rQixRQUFQLENBQWdCLEtBQWhCLEVBQXVCLFVBQXZCLENBQVo7QUFDQWIsWUFBUWMsV0FBUixDQUFvQkYsS0FBcEI7QUFDQSxRQUFJRyxHQUFKO0FBQ0EsUUFBSWQsRUFBRWUsUUFBRixDQUFXQyxPQUFYLElBQXNCZixNQUExQixFQUFrQztBQUM5QmEsY0FBTWpCLE1BQU1vQixhQUFOLENBQW9CLEtBQXBCLENBQU47QUFDQUgsWUFBSUQsV0FBSixDQUFnQmhCLE1BQU1vQixhQUFOLENBQW9CLE1BQXBCLENBQWhCO0FBQ0FsQixnQkFBUWMsV0FBUixDQUFvQkMsR0FBcEI7QUFDSDtBQUNELFFBQUlkLEVBQUVrQixXQUFOLEVBQW1CO0FBQ2YsWUFBSUMsY0FBY25CLEVBQUVTLFdBQUYsS0FBa0IsT0FBbEIsR0FBNEIsUUFBNUIsR0FBdUMsRUFBekQ7QUFDQVYsZ0JBQVFjLFdBQVIsQ0FBb0JPLGFBQWF4QixRQUFReUIsS0FBckIsRUFBNEIsVUFBVUYsV0FBdEMsQ0FBcEI7QUFDQXBCLGdCQUFRYyxXQUFSLENBQW9CTyxhQUFheEIsUUFBUTBCLEtBQXJCLEVBQTRCLFVBQVVILFdBQXRDLENBQXBCO0FBQ0g7QUFDRCxRQUFJSSxLQUFKO0FBQ0EsUUFBSXRCLFVBQVVELEVBQUV3QixTQUFGLENBQVlDLFNBQTFCLEVBQXFDO0FBQ2pDRixnQkFBUTdCLE9BQU9rQixRQUFQLENBQWdCLE9BQWhCLEVBQXlCLE9BQXpCLENBQVI7QUFDQWxCLGVBQU9nQyxVQUFQLENBQWtCSCxLQUFsQixFQUF5QixLQUF6QjtBQUNBeEIsZ0JBQVFjLFdBQVIsQ0FBb0JVLEtBQXBCO0FBQ0g7QUFDRCxXQUFPO0FBQ0haLGVBQU9BLEtBREo7QUFFSFksZUFBT0EsS0FGSjtBQUdIVCxhQUFLQTtBQUhGLEtBQVA7QUFLSDtBQUNEdEIsUUFBUW1DLE9BQVIsR0FBa0I3QixJQUFsQjtBQUNBLFNBQVNzQixZQUFULENBQXNCUSxLQUF0QixFQUE2QkMsU0FBN0IsRUFBd0M7QUFDcEMsUUFBSUMsS0FBS3BDLE9BQU9rQixRQUFQLENBQWdCLFFBQWhCLEVBQTBCaUIsU0FBMUIsQ0FBVDtBQUNBLFFBQUlFLENBQUo7QUFDQSxTQUFLLElBQUlDLENBQVQsSUFBY0osS0FBZCxFQUFxQjtBQUNqQkcsWUFBSXJDLE9BQU9rQixRQUFQLENBQWdCLE9BQWhCLENBQUo7QUFDQW1CLFVBQUVFLFdBQUYsR0FBZ0JMLE1BQU1JLENBQU4sQ0FBaEI7QUFDQUYsV0FBR2pCLFdBQUgsQ0FBZWtCLENBQWY7QUFDSDtBQUNELFdBQU9ELEVBQVA7QUFDSCIsImZpbGUiOiIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHV0aWxfMSA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG52YXIgdHlwZXNfMSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xudmFyIHN2Z18xID0gcmVxdWlyZShcIi4vc3ZnXCIpO1xuZnVuY3Rpb24gd3JhcChlbGVtZW50LCBzLCBib3VuZHMpIHtcbiAgICBlbGVtZW50LmlubmVySFRNTCA9ICcnO1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnY2ctYm9hcmQtd3JhcCcpO1xuICAgIHV0aWxfMS5jb2xvcnMuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ29yaWVudGF0aW9uLScgKyBjLCBzLm9yaWVudGF0aW9uID09PSBjKTtcbiAgICB9KTtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ21hbmlwdWxhYmxlJywgIXMudmlld09ubHkpO1xuICAgIHZhciBib2FyZCA9IHV0aWxfMS5jcmVhdGVFbCgnZGl2JywgJ2NnLWJvYXJkJyk7XG4gICAgZWxlbWVudC5hcHBlbmRDaGlsZChib2FyZCk7XG4gICAgdmFyIHN2ZztcbiAgICBpZiAocy5kcmF3YWJsZS52aXNpYmxlICYmIGJvdW5kcykge1xuICAgICAgICBzdmcgPSBzdmdfMS5jcmVhdGVFbGVtZW50KCdzdmcnKTtcbiAgICAgICAgc3ZnLmFwcGVuZENoaWxkKHN2Z18xLmNyZWF0ZUVsZW1lbnQoJ2RlZnMnKSk7XG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoc3ZnKTtcbiAgICB9XG4gICAgaWYgKHMuY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgdmFyIG9yaWVudENsYXNzID0gcy5vcmllbnRhdGlvbiA9PT0gJ2JsYWNrJyA/ICcgYmxhY2snIDogJyc7XG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQocmVuZGVyQ29vcmRzKHR5cGVzXzEucmFua3MsICdyYW5rcycgKyBvcmllbnRDbGFzcykpO1xuICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKHJlbmRlckNvb3Jkcyh0eXBlc18xLmZpbGVzLCAnZmlsZXMnICsgb3JpZW50Q2xhc3MpKTtcbiAgICB9XG4gICAgdmFyIGdob3N0O1xuICAgIGlmIChib3VuZHMgJiYgcy5kcmFnZ2FibGUuc2hvd0dob3N0KSB7XG4gICAgICAgIGdob3N0ID0gdXRpbF8xLmNyZWF0ZUVsKCdwaWVjZScsICdnaG9zdCcpO1xuICAgICAgICB1dGlsXzEuc2V0VmlzaWJsZShnaG9zdCwgZmFsc2UpO1xuICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGdob3N0KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYm9hcmQ6IGJvYXJkLFxuICAgICAgICBnaG9zdDogZ2hvc3QsXG4gICAgICAgIHN2Zzogc3ZnXG4gICAgfTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHdyYXA7XG5mdW5jdGlvbiByZW5kZXJDb29yZHMoZWxlbXMsIGNsYXNzTmFtZSkge1xuICAgIHZhciBlbCA9IHV0aWxfMS5jcmVhdGVFbCgnY29vcmRzJywgY2xhc3NOYW1lKTtcbiAgICB2YXIgZjtcbiAgICBmb3IgKHZhciBpIGluIGVsZW1zKSB7XG4gICAgICAgIGYgPSB1dGlsXzEuY3JlYXRlRWwoJ2Nvb3JkJyk7XG4gICAgICAgIGYudGV4dENvbnRlbnQgPSBlbGVtc1tpXTtcbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQoZik7XG4gICAgfVxuICAgIHJldHVybiBlbDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vY2hlc3Nncm91bmQvd3JhcC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (immutable) */ __webpack_exports__[\"a\"] = uniques;\nfunction uniques(arr) {\n  var uniqueArray = arr.filter(function (elem, index, self) {\n    return index === self.indexOf(elem);\n  });\n  return uniqueArray;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jaGVzc2JvYXJkL1V0aWwuanM/ZTdhOCJdLCJuYW1lcyI6WyJ1bmlxdWVzIiwiYXJyIiwidW5pcXVlQXJyYXkiLCJmaWx0ZXIiLCJlbGVtIiwiaW5kZXgiLCJzZWxmIiwiaW5kZXhPZiJdLCJtYXBwaW5ncyI6IjtBQUFPLFNBQVNBLE9BQVQsQ0FBa0JDLEdBQWxCLEVBQXVCO0FBQzVCLE1BQUlDLGNBQWNELElBQUlFLE1BQUosQ0FBVyxVQUFVQyxJQUFWLEVBQWdCQyxLQUFoQixFQUF1QkMsSUFBdkIsRUFBNkI7QUFDeEQsV0FBT0QsVUFBVUMsS0FBS0MsT0FBTCxDQUFhSCxJQUFiLENBQWpCO0FBQ0QsR0FGaUIsQ0FBbEI7QUFHQSxTQUFPRixXQUFQO0FBQ0QiLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gdW5pcXVlcyAoYXJyKSB7XG4gIGxldCB1bmlxdWVBcnJheSA9IGFyci5maWx0ZXIoZnVuY3Rpb24gKGVsZW0sIGluZGV4LCBzZWxmKSB7XG4gICAgcmV0dXJuIGluZGV4ID09PSBzZWxmLmluZGV4T2YoZWxlbSlcbiAgfSlcbiAgcmV0dXJuIHVuaXF1ZUFycmF5XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9jaGVzc2JvYXJkL1V0aWwuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (immutable) */ __webpack_exports__[\"install\"] = install;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_chessboard_index_vue__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_chessboard_index_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_chessboard_index_vue__);\n/* harmony reexport (default from non-hamory) */ __webpack_require__.d(__webpack_exports__, \"chessboard\", function() { return __WEBPACK_IMPORTED_MODULE_0__components_chessboard_index_vue___default.a; });\n\n\n// Install the components\nfunction install(Vue) {\n  Vue.component('chessboard', __WEBPACK_IMPORTED_MODULE_0__components_chessboard_index_vue___default.a);\n  /* -- Add more components here -- */\n}\n\n// Expose the components\n\n\n/* -- Plugin definition & Auto-install -- */\n/* You shouldn't have to modify the code below */\n\n// Plugin\nvar plugin = {\n  /* eslint-disable no-undef */\n  version: \"0.6.7\",\n  install: install\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (plugin);\n\n// Auto-install\nvar GlobalVue = null;\nif (typeof window !== 'undefined') {\n  GlobalVue = window.Vue;\n} else if (typeof global !== 'undefined') {\n  GlobalVue = global.Vue;\n}\nif (GlobalVue) {\n  GlobalVue.use(plugin);\n}\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(9)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/OTU1MiJdLCJuYW1lcyI6WyJpbnN0YWxsIiwiVnVlIiwiY29tcG9uZW50IiwicGx1Z2luIiwidmVyc2lvbiIsIkdsb2JhbFZ1ZSIsIndpbmRvdyIsImdsb2JhbCIsInVzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7QUFFQTtBQUNPLFNBQVNBLE9BQVQsQ0FBa0JDLEdBQWxCLEVBQXVCO0FBQzVCQSxNQUFJQyxTQUFKLENBQWMsWUFBZCxFQUE0Qix3RUFBNUI7QUFDQTtBQUNEOztBQUVEO0FBQ0E7O0FBS0E7QUFDQTs7QUFFQTtBQUNBLElBQU1DLFNBQVM7QUFDYjtBQUNBQyxXQUFTLE9BRkk7QUFHYko7QUFIYSxDQUFmOztBQU1BLCtEQUFlRyxNQUFmOztBQUVBO0FBQ0EsSUFBSUUsWUFBWSxJQUFoQjtBQUNBLElBQUksT0FBT0MsTUFBUCxLQUFrQixXQUF0QixFQUFtQztBQUNqQ0QsY0FBWUMsT0FBT0wsR0FBbkI7QUFDRCxDQUZELE1BRU8sSUFBSSxPQUFPTSxNQUFQLEtBQWtCLFdBQXRCLEVBQW1DO0FBQ3hDRixjQUFZRSxPQUFPTixHQUFuQjtBQUNEO0FBQ0QsSUFBSUksU0FBSixFQUFlO0FBQ2JBLFlBQVVHLEdBQVYsQ0FBY0wsTUFBZDtBQUNELEMiLCJmaWxlIjoiMjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hlc3Nib2FyZCBmcm9tICcuL2NvbXBvbmVudHMvY2hlc3Nib2FyZC9pbmRleC52dWUnXG5cbi8vIEluc3RhbGwgdGhlIGNvbXBvbmVudHNcbmV4cG9ydCBmdW5jdGlvbiBpbnN0YWxsIChWdWUpIHtcbiAgVnVlLmNvbXBvbmVudCgnY2hlc3Nib2FyZCcsIGNoZXNzYm9hcmQpXG4gIC8qIC0tIEFkZCBtb3JlIGNvbXBvbmVudHMgaGVyZSAtLSAqL1xufVxuXG4vLyBFeHBvc2UgdGhlIGNvbXBvbmVudHNcbmV4cG9ydCB7XG4gIGNoZXNzYm9hcmRcbiAgLyogLS0gQWRkIG1vcmUgY29tcG9uZW50cyBoZXJlIC0tICovXG59XG5cbi8qIC0tIFBsdWdpbiBkZWZpbml0aW9uICYgQXV0by1pbnN0YWxsIC0tICovXG4vKiBZb3Ugc2hvdWxkbid0IGhhdmUgdG8gbW9kaWZ5IHRoZSBjb2RlIGJlbG93ICovXG5cbi8vIFBsdWdpblxuY29uc3QgcGx1Z2luID0ge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuICB2ZXJzaW9uOiBWRVJTSU9OLFxuICBpbnN0YWxsXG59XG5cbmV4cG9ydCBkZWZhdWx0IHBsdWdpblxuXG4vLyBBdXRvLWluc3RhbGxcbmxldCBHbG9iYWxWdWUgPSBudWxsXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgR2xvYmFsVnVlID0gd2luZG93LlZ1ZVxufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICBHbG9iYWxWdWUgPSBnbG9iYWwuVnVlXG59XG5pZiAoR2xvYmFsVnVlKSB7XG4gIEdsb2JhbFZ1ZS51c2UocGx1Z2luKVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_chess_js__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_chess_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_chess_js__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_chessground__ = __webpack_require__(13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_chessground___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_chessground__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Util_js__ = __webpack_require__(20);\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'chessboard',\n  props: {\n    fen: {\n      type: String,\n      default: ''\n    },\n    free: {\n      type: Boolean,\n      default: false\n    },\n    showThreats: {\n      type: Boolean,\n      default: false\n    },\n    onPromotion: {\n      type: Function,\n      default: function _default() {\n        return 'q';\n      }\n    },\n    orientation: {\n      type: String,\n      default: 'white'\n    },\n    player: {\n      type: String,\n      default: null\n    },\n    size: {\n      type: String,\n      required: true\n    }\n  },\n  watch: {\n    fen: function fen(newFen) {\n      this.fen = newFen;\n      this.loadPosition();\n    },\n    orientation: function orientation(_orientation) {\n      this.orientation = _orientation;\n      this.loadPosition();\n    },\n    showThreats: function showThreats(st) {\n      this.showThreats = st;\n      if (this.showThreats) {\n        this.paintThreats();\n      }\n    }\n  },\n  methods: {\n    possibleMoves: function possibleMoves() {\n      var _this = this;\n\n      var dests = {};\n      this.game.SQUARES.forEach(function (s) {\n        var ms = _this.game.moves({ square: s, verbose: true });\n        if (ms.length) dests[s] = ms.map(function (m) {\n          return m.to;\n        });\n      });\n      return dests;\n    },\n    opponentMoves: function opponentMoves() {\n      var originalPGN = this.game.pgn();\n      var tokens = this.game.fen().split(' ');\n      tokens[1] = tokens[1] === 'w' ? 'b' : 'w';\n      tokens = tokens.join(' ');\n      var valid = this.game.load(tokens);\n      if (valid) {\n        var moves = this.game.moves({ verbose: true });\n        this.game.load_pgn(originalPGN);\n        return moves;\n      } else {\n        return [];\n      }\n    },\n    toColor: function toColor() {\n      return this.game.turn() === 'w' ? 'white' : 'black';\n    },\n    paintThreats: function paintThreats() {\n      var moves = this.game.moves({ verbose: true });\n      var threats = [];\n      moves.forEach(function (move) {\n        threats.push({ orig: move.to, brush: 'yellow' });\n\n        if (move['captured']) {\n          threats.push({ orig: move.from, dest: move.to, brush: 'red' });\n        }\n        if (move['san'].includes('+')) {\n          threats.push({ orig: move.from, dest: move.to, brush: 'blue' });\n        }\n      });\n      this.board.setShapes(threats);\n    },\n    calculatePromotions: function calculatePromotions() {\n      var moves = this.game.moves({ verbose: true });\n      this.promotions = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = moves[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var move = _step.value;\n\n          if (move.promotion) {\n            this.promotions.push(move);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    },\n    isPromotion: function isPromotion(orig, dest) {\n      var filteredPromotions = this.promotions.filter(function (move) {\n        return move.from === orig && move.to === dest;\n      });\n      return filteredPromotions.length > 0; // The current movement is a promotion\n    },\n    changeTurn: function changeTurn() {\n      var _this2 = this;\n\n      return function (orig, dest, metadata) {\n        if (_this2.isPromotion(orig, dest)) {\n          _this2.promoteTo = _this2.onPromotion();\n        }\n        _this2.game.move({ from: orig, to: dest, promotion: _this2.promoteTo }); // promote to queen for simplicity\n        _this2.board.set({\n          fen: _this2.game.fen(),\n          turnColor: _this2.toColor(),\n          movable: {\n            color: _this2.player ? _this2.player : _this2.toColor(),\n            dests: _this2.possibleMoves()\n          }\n        });\n        _this2.calculatePromotions();\n        _this2.afterMove();\n      };\n    },\n    afterMove: function afterMove() {\n      if (this.showThreats) {\n        this.paintThreats();\n      }\n      var threats = this.countThreats(this.toColor()) || {};\n      threats['history'] = this.game.history();\n      threats['fen'] = this.game.fen();\n      this.$emit('onMove', threats);\n    },\n    countThreats: function countThreats(color) {\n      var threats = {};\n      var captures = 0;\n      var checks = 0;\n      var moves = this.game.moves({ verbose: true });\n      if (color !== this.toColor()) {\n        moves = this.opponentMoves();\n      }\n\n      if (moves.length === 0) {\n        return null; // It´s an invalid position\n      }\n\n      moves.forEach(function (move) {\n        if (move['captured']) {\n          captures++;\n        }\n        if (move['san'].includes('+')) {\n          checks++;\n        }\n      });\n\n      threats['legal_' + color] = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__Util_js__[\"a\" /* uniques */])(moves.map(function (x) {\n        return x.from + x.to;\n      })).length; // promotions count as 4 moves. This remove those duplicates moves.\n      threats['checks_' + color] = checks;\n      threats['threat_' + color] = captures;\n      threats['turn'] = color;\n      return threats;\n    },\n    loadPosition: function loadPosition() {\n      // set a default value for the configuration object itself to allow call to loadPosition()\n      this.game.load(this.fen);\n      this.board = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1_chessground__[\"Chessground\"])(this.$refs.board, {\n        fen: this.game.fen(),\n        turnColor: this.toColor(),\n        movable: {\n          color: this.player ? this.player : this.toColor(),\n          free: this.free,\n          dests: this.possibleMoves()\n        },\n        orientation: this.orientation,\n        resizable: true,\n        highlight: {\n          lastMove: true,\n          check: true\n        }\n      });\n      this.board.set({\n        movable: { events: { after: this.changeTurn() } }\n      });\n      this.afterMove();\n    }\n  },\n  mounted: function mounted() {\n    this.loadPosition();\n  },\n  created: function created() {\n    this.game = new __WEBPACK_IMPORTED_MODULE_0_chess_js___default.a();\n    this.board = null;\n    this.promotions = [];\n    this.promoteTo = 'q';\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vaW5kZXgudnVlPzY2NGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQU9BO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQURBO0FBRUE7QUFDQTtBQUNBLGtCQURBO0FBRUE7QUFGQSxLQURBO0FBS0E7QUFDQSxtQkFEQTtBQUVBO0FBRkEsS0FMQTtBQVNBO0FBQ0EsbUJBREE7QUFFQTtBQUZBLEtBVEE7QUFhQTtBQUNBLG9CQURBO0FBRUE7QUFBQTtBQUFBO0FBRkEsS0FiQTtBQWlCQTtBQUNBLGtCQURBO0FBRUE7QUFGQSxLQWpCQTtBQXFCQTtBQUNBLGtCQURBO0FBRUE7QUFGQSxLQXJCQTtBQXlCQTtBQUNBLGtCQURBO0FBRUE7QUFGQTtBQXpCQSxHQUZBO0FBZ0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FKQTtBQUtBO0FBQ0E7QUFDQTtBQUNBLEtBUkE7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFkQSxHQWhDQTtBQWdEQTtBQUNBLGlCQURBLDJCQUNBO0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0EsT0FIQTtBQUlBO0FBQ0EsS0FSQTtBQVNBLGlCQVRBLDJCQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FKQSxNQUlBO0FBQ0E7QUFDQTtBQUNBLEtBdEJBO0FBdUJBLFdBdkJBLHFCQXVCQTtBQUNBO0FBQ0EsS0F6QkE7QUEwQkEsZ0JBMUJBLDBCQTBCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BVEE7QUFVQTtBQUNBLEtBeENBO0FBeUNBLHVCQXpDQSxpQ0F5Q0E7QUFDQTtBQUNBO0FBRkE7QUFBQTtBQUFBOztBQUFBO0FBR0E7QUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVBBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFRQSxLQWpEQTtBQWtEQSxlQWxEQSx1QkFrREEsSUFsREEsRUFrREEsSUFsREEsRUFrREE7QUFDQTtBQUFBO0FBQUE7QUFDQSwyQ0FGQSxDQUVBO0FBQ0EsS0FyREE7QUFzREEsY0F0REEsd0JBc0RBO0FBQUE7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFKQSxDQUlBO0FBQ0E7QUFDQSxnQ0FEQTtBQUVBLHFDQUZBO0FBR0E7QUFDQSxtRUFEQTtBQUVBO0FBRkE7QUFIQTtBQVFBO0FBQ0E7QUFDQSxPQWZBO0FBZ0JBLEtBdkVBO0FBd0VBLGFBeEVBLHVCQXdFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FoRkE7QUFpRkEsZ0JBakZBLHdCQWlGQSxLQWpGQSxFQWlGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0JBREEsQ0FDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FQQTs7QUFTQTtBQUFBO0FBQUEsaUJBdEJBLENBc0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQTVHQTtBQTZHQSxnQkE3R0EsMEJBNkdBO0FBQUE7QUFDQTtBQUNBO0FBQ0EsNEJBREE7QUFFQSxpQ0FGQTtBQUdBO0FBQ0EsMkRBREE7QUFFQSx5QkFGQTtBQUdBO0FBSEEsU0FIQTtBQVFBLHFDQVJBO0FBU0EsdUJBVEE7QUFVQTtBQUNBLHdCQURBO0FBRUE7QUFGQTtBQVZBO0FBZUE7QUFDQTtBQURBO0FBR0E7QUFDQTtBQWxJQSxHQWhEQTtBQW9MQSxTQXBMQSxxQkFvTEE7QUFDQTtBQUNBLEdBdExBO0FBdUxBLFNBdkxBLHFCQXVMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUE1TEEiLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJibHVlIG1lcmlkYVwiPlxuICAgIDxkaXYgcmVmPVwiYm9hcmRcIiBjbGFzcz1cImNnLWJvYXJkLXdyYXBcIiA6c3R5bGU9XCJ7d2lkdGg6IHNpemUrJ3B4JywgaGVpZ2h0OiBzaXplKydweCd9XCI+PC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBDaGVzcyBmcm9tICdjaGVzcy5qcydcbmltcG9ydCB7Q2hlc3Nncm91bmR9IGZyb20gJ2NoZXNzZ3JvdW5kJ1xuaW1wb3J0IHt1bmlxdWVzfSBmcm9tICcuL1V0aWwuanMnXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2NoZXNzYm9hcmQnLFxuICBwcm9wczoge1xuICAgIGZlbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJydcbiAgICB9LFxuICAgIGZyZWU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH0sXG4gICAgc2hvd1RocmVhdHM6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH0sXG4gICAgb25Qcm9tb3Rpb246IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgZGVmYXVsdDogKCkgPT4gJ3EnXG4gICAgfSxcbiAgICBvcmllbnRhdGlvbjoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ3doaXRlJ1xuICAgIH0sXG4gICAgcGxheWVyOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiBudWxsXG5cdH0sXG5cdHNpemU6IHtcblx0XHR0eXBlOiBTdHJpbmcsXG4gICAgICBcdHJlcXVpcmVkOiB0cnVlXG5cdH1cbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICBmZW46IGZ1bmN0aW9uIChuZXdGZW4pIHtcbiAgICAgIHRoaXMuZmVuID0gbmV3RmVuXG4gICAgICB0aGlzLmxvYWRQb3NpdGlvbigpXG4gICAgfSxcbiAgICBvcmllbnRhdGlvbjogZnVuY3Rpb24gKG9yaWVudGF0aW9uKSB7XG4gICAgICB0aGlzLm9yaWVudGF0aW9uID0gb3JpZW50YXRpb25cbiAgICAgIHRoaXMubG9hZFBvc2l0aW9uKClcbiAgICB9LFxuICAgIHNob3dUaHJlYXRzOiBmdW5jdGlvbiAoc3QpIHtcbiAgICAgIHRoaXMuc2hvd1RocmVhdHMgPSBzdFxuICAgICAgaWYgKHRoaXMuc2hvd1RocmVhdHMpIHtcbiAgICAgICAgdGhpcy5wYWludFRocmVhdHMoKVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIHBvc3NpYmxlTW92ZXMgKCkge1xuICAgICAgY29uc3QgZGVzdHMgPSB7fVxuICAgICAgdGhpcy5nYW1lLlNRVUFSRVMuZm9yRWFjaChzID0+IHtcbiAgICAgICAgY29uc3QgbXMgPSB0aGlzLmdhbWUubW92ZXMoe3NxdWFyZTogcywgdmVyYm9zZTogdHJ1ZX0pXG4gICAgICAgIGlmIChtcy5sZW5ndGgpIGRlc3RzW3NdID0gbXMubWFwKG0gPT4gbS50bylcbiAgICAgIH0pXG4gICAgICByZXR1cm4gZGVzdHNcbiAgICB9LFxuICAgIG9wcG9uZW50TW92ZXMgKCkge1xuICAgICAgbGV0IG9yaWdpbmFsUEdOID0gdGhpcy5nYW1lLnBnbigpXG4gICAgICBsZXQgdG9rZW5zID0gdGhpcy5nYW1lLmZlbigpLnNwbGl0KCcgJylcbiAgICAgIHRva2Vuc1sxXSA9IHRva2Vuc1sxXSA9PT0gJ3cnID8gJ2InIDogJ3cnXG4gICAgICB0b2tlbnMgPSB0b2tlbnMuam9pbignICcpXG4gICAgICBsZXQgdmFsaWQgPSB0aGlzLmdhbWUubG9hZCh0b2tlbnMpXG4gICAgICBpZiAodmFsaWQpIHtcbiAgICAgICAgbGV0IG1vdmVzID0gdGhpcy5nYW1lLm1vdmVzKHt2ZXJib3NlOiB0cnVlfSlcbiAgICAgICAgdGhpcy5nYW1lLmxvYWRfcGduKG9yaWdpbmFsUEdOKVxuICAgICAgICByZXR1cm4gbW92ZXNcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbXVxuICAgICAgfVxuICAgIH0sXG4gICAgdG9Db2xvciAoKSB7XG4gICAgICByZXR1cm4gKHRoaXMuZ2FtZS50dXJuKCkgPT09ICd3JykgPyAnd2hpdGUnIDogJ2JsYWNrJ1xuICAgIH0sXG4gICAgcGFpbnRUaHJlYXRzICgpIHtcbiAgICAgIGxldCBtb3ZlcyA9IHRoaXMuZ2FtZS5tb3Zlcyh7dmVyYm9zZTogdHJ1ZX0pXG4gICAgICBsZXQgdGhyZWF0cyA9IFtdXG4gICAgICBtb3Zlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb3ZlKSB7XG4gICAgICAgIHRocmVhdHMucHVzaCh7b3JpZzogbW92ZS50bywgYnJ1c2g6ICd5ZWxsb3cnfSlcblxuICAgICAgICBpZiAobW92ZVsnY2FwdHVyZWQnXSkge1xuICAgICAgICAgIHRocmVhdHMucHVzaCh7b3JpZzogbW92ZS5mcm9tLCBkZXN0OiBtb3ZlLnRvLCBicnVzaDogJ3JlZCd9KVxuICAgICAgICB9XG4gICAgICAgIGlmIChtb3ZlWydzYW4nXS5pbmNsdWRlcygnKycpKSB7XG4gICAgICAgICAgdGhyZWF0cy5wdXNoKHtvcmlnOiBtb3ZlLmZyb20sIGRlc3Q6IG1vdmUudG8sIGJydXNoOiAnYmx1ZSd9KVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgdGhpcy5ib2FyZC5zZXRTaGFwZXModGhyZWF0cylcbiAgICB9LFxuICAgIGNhbGN1bGF0ZVByb21vdGlvbnMgKCkge1xuICAgICAgbGV0IG1vdmVzID0gdGhpcy5nYW1lLm1vdmVzKHt2ZXJib3NlOiB0cnVlfSlcbiAgICAgIHRoaXMucHJvbW90aW9ucyA9IFtdXG4gICAgICBmb3IgKGxldCBtb3ZlIG9mIG1vdmVzKSB7XG4gICAgICAgIGlmIChtb3ZlLnByb21vdGlvbikge1xuICAgICAgICAgIHRoaXMucHJvbW90aW9ucy5wdXNoKG1vdmUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGlzUHJvbW90aW9uICAgKG9yaWcsIGRlc3QpIHtcbiAgICAgIGxldCBmaWx0ZXJlZFByb21vdGlvbnMgPSB0aGlzLnByb21vdGlvbnMuZmlsdGVyKG1vdmUgPT4gbW92ZS5mcm9tID09PSBvcmlnICYmIG1vdmUudG8gPT09IGRlc3QpXG4gICAgICByZXR1cm4gZmlsdGVyZWRQcm9tb3Rpb25zLmxlbmd0aCA+IDAgLy8gVGhlIGN1cnJlbnQgbW92ZW1lbnQgaXMgYSBwcm9tb3Rpb25cbiAgICB9LFxuICAgIGNoYW5nZVR1cm4gKCkge1xuICAgICAgcmV0dXJuIChvcmlnLCBkZXN0LCBtZXRhZGF0YSkgPT4ge1xuICAgICAgICBpZiAodGhpcy5pc1Byb21vdGlvbihvcmlnLCBkZXN0KSkge1xuICAgICAgICAgIHRoaXMucHJvbW90ZVRvID0gdGhpcy5vblByb21vdGlvbigpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nYW1lLm1vdmUoe2Zyb206IG9yaWcsIHRvOiBkZXN0LCBwcm9tb3Rpb246IHRoaXMucHJvbW90ZVRvfSkgLy8gcHJvbW90ZSB0byBxdWVlbiBmb3Igc2ltcGxpY2l0eVxuICAgICAgICB0aGlzLmJvYXJkLnNldCh7XG4gICAgICAgICAgZmVuOiB0aGlzLmdhbWUuZmVuKCksXG4gICAgICAgICAgdHVybkNvbG9yOiB0aGlzLnRvQ29sb3IoKSxcbiAgICAgICAgICBtb3ZhYmxlOiB7XG4gICAgICAgICAgICBjb2xvcjogdGhpcy5wbGF5ZXIgPyB0aGlzLnBsYXllciA6IHRoaXMudG9Db2xvcigpLFxuICAgICAgICAgICAgZGVzdHM6IHRoaXMucG9zc2libGVNb3ZlcygpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICB0aGlzLmNhbGN1bGF0ZVByb21vdGlvbnMoKVxuICAgICAgICB0aGlzLmFmdGVyTW92ZSgpXG4gICAgICB9XG4gICAgfSxcbiAgICBhZnRlck1vdmUgKCkge1xuICAgICAgaWYgKHRoaXMuc2hvd1RocmVhdHMpIHtcbiAgICAgICAgdGhpcy5wYWludFRocmVhdHMoKVxuICAgICAgfVxuICAgICAgbGV0IHRocmVhdHMgPSB0aGlzLmNvdW50VGhyZWF0cyh0aGlzLnRvQ29sb3IoKSkgfHwge31cbiAgICAgIHRocmVhdHNbJ2hpc3RvcnknXSA9IHRoaXMuZ2FtZS5oaXN0b3J5KClcbiAgICAgIHRocmVhdHNbJ2ZlbiddID0gdGhpcy5nYW1lLmZlbigpXG4gICAgICB0aGlzLiRlbWl0KCdvbk1vdmUnLCB0aHJlYXRzKVxuICAgIH0sXG4gICAgY291bnRUaHJlYXRzIChjb2xvcikge1xuICAgICAgbGV0IHRocmVhdHMgPSB7fVxuICAgICAgbGV0IGNhcHR1cmVzID0gMFxuICAgICAgbGV0IGNoZWNrcyA9IDBcbiAgICAgIGxldCBtb3ZlcyA9IHRoaXMuZ2FtZS5tb3Zlcyh7dmVyYm9zZTogdHJ1ZX0pXG4gICAgICBpZiAoY29sb3IgIT09IHRoaXMudG9Db2xvcigpKSB7XG4gICAgICAgIG1vdmVzID0gdGhpcy5vcHBvbmVudE1vdmVzKClcbiAgICAgIH1cblxuICAgICAgaWYgKG1vdmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbCAvLyBJdMK0cyBhbiBpbnZhbGlkIHBvc2l0aW9uXG4gICAgICB9XG5cbiAgICAgIG1vdmVzLmZvckVhY2goZnVuY3Rpb24gKG1vdmUpIHtcbiAgICAgICAgaWYgKG1vdmVbJ2NhcHR1cmVkJ10pIHtcbiAgICAgICAgICBjYXB0dXJlcysrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1vdmVbJ3NhbiddLmluY2x1ZGVzKCcrJykpIHtcbiAgICAgICAgICBjaGVja3MrK1xuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICB0aHJlYXRzW2BsZWdhbF8ke2NvbG9yfWBdID0gdW5pcXVlcyhtb3Zlcy5tYXAoeCA9PiB4LmZyb20gKyB4LnRvKSkubGVuZ3RoIC8vIHByb21vdGlvbnMgY291bnQgYXMgNCBtb3Zlcy4gVGhpcyByZW1vdmUgdGhvc2UgZHVwbGljYXRlcyBtb3Zlcy5cbiAgICAgIHRocmVhdHNbYGNoZWNrc18ke2NvbG9yfWBdID0gY2hlY2tzXG4gICAgICB0aHJlYXRzW2B0aHJlYXRfJHtjb2xvcn1gXSA9IGNhcHR1cmVzXG4gICAgICB0aHJlYXRzW2B0dXJuYF0gPSBjb2xvclxuICAgICAgcmV0dXJuIHRocmVhdHNcbiAgICB9LFxuICAgIGxvYWRQb3NpdGlvbiAoKSB7IC8vIHNldCBhIGRlZmF1bHQgdmFsdWUgZm9yIHRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBpdHNlbGYgdG8gYWxsb3cgY2FsbCB0byBsb2FkUG9zaXRpb24oKVxuICAgICAgdGhpcy5nYW1lLmxvYWQodGhpcy5mZW4pXG4gICAgICB0aGlzLmJvYXJkID0gQ2hlc3Nncm91bmQodGhpcy4kcmVmcy5ib2FyZCwge1xuICAgICAgICBmZW46IHRoaXMuZ2FtZS5mZW4oKSxcbiAgICAgICAgdHVybkNvbG9yOiB0aGlzLnRvQ29sb3IoKSxcbiAgICAgICAgbW92YWJsZToge1xuICAgICAgICAgIGNvbG9yOiB0aGlzLnBsYXllciA/IHRoaXMucGxheWVyIDogdGhpcy50b0NvbG9yKCksXG4gICAgICAgICAgZnJlZTogdGhpcy5mcmVlLFxuICAgICAgICAgIGRlc3RzOiB0aGlzLnBvc3NpYmxlTW92ZXMoKVxuICAgICAgICB9LFxuXHRcdCAgICBvcmllbnRhdGlvbjogdGhpcy5vcmllbnRhdGlvbixcbiAgICAgICAgcmVzaXphYmxlOiB0cnVlLFxuICAgICAgICBoaWdobGlnaHQ6IHtcbiAgICAgICAgICBsYXN0TW92ZTogdHJ1ZSxcbiAgICAgICAgICBjaGVjazogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgdGhpcy5ib2FyZC5zZXQoe1xuICAgICAgICBtb3ZhYmxlOiB7IGV2ZW50czogeyBhZnRlcjogdGhpcy5jaGFuZ2VUdXJuKCkgfSB9XG4gICAgICB9KVxuICAgICAgdGhpcy5hZnRlck1vdmUoKVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZCAoKSB7XG4gICAgdGhpcy5sb2FkUG9zaXRpb24oKVxuICB9LFxuICBjcmVhdGVkICgpIHtcbiAgICB0aGlzLmdhbWUgPSBuZXcgQ2hlc3MoKVxuICAgIHRoaXMuYm9hcmQgPSBudWxsXG4gICAgdGhpcy5wcm9tb3Rpb25zID0gW11cbiAgICB0aGlzLnByb21vdGVUbyA9ICdxJ1xuICB9XG59XG48L3NjcmlwdD5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBpbmRleC52dWU/Njg0ZWM2ZjAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, exports) {

eval("module.exports = function normalizeComponent (\n  rawScriptExports,\n  compiledTemplate,\n  scopeId,\n  cssModules\n) {\n  var esModule\n  var scriptExports = rawScriptExports = rawScriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof rawScriptExports.default\n  if (type === 'object' || type === 'function') {\n    esModule = rawScriptExports\n    scriptExports = rawScriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (compiledTemplate) {\n    options.render = compiledTemplate.render\n    options.staticRenderFns = compiledTemplate.staticRenderFns\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  // inject cssModules\n  if (cssModules) {\n    var computed = options.computed || (options.computed = {})\n    Object.keys(cssModules).forEach(function (key) {\n      var module = cssModules[key]\n      computed[key] = function () { return module }\n    })\n  }\n\n  return {\n    esModule: esModule,\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzP2Q0ZjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgcmF3U2NyaXB0RXhwb3J0cyxcbiAgY29tcGlsZWRUZW1wbGF0ZSxcbiAgc2NvcGVJZCxcbiAgY3NzTW9kdWxlc1xuKSB7XG4gIHZhciBlc01vZHVsZVxuICB2YXIgc2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzIHx8IHt9XG5cbiAgLy8gRVM2IG1vZHVsZXMgaW50ZXJvcFxuICB2YXIgdHlwZSA9IHR5cGVvZiByYXdTY3JpcHRFeHBvcnRzLmRlZmF1bHRcbiAgaWYgKHR5cGUgPT09ICdvYmplY3QnIHx8IHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBlc01vZHVsZSA9IHJhd1NjcmlwdEV4cG9ydHNcbiAgICBzY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cy5kZWZhdWx0XG4gIH1cblxuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKGNvbXBpbGVkVGVtcGxhdGUpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGNvbXBpbGVkVGVtcGxhdGUucmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBjb21waWxlZFRlbXBsYXRlLnN0YXRpY1JlbmRlckZuc1xuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gc2NvcGVJZFxuICB9XG5cbiAgLy8gaW5qZWN0IGNzc01vZHVsZXNcbiAgaWYgKGNzc01vZHVsZXMpIHtcbiAgICB2YXIgY29tcHV0ZWQgPSBvcHRpb25zLmNvbXB1dGVkIHx8IChvcHRpb25zLmNvbXB1dGVkID0ge30pXG4gICAgT2JqZWN0LmtleXMoY3NzTW9kdWxlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgbW9kdWxlID0gY3NzTW9kdWxlc1trZXldXG4gICAgICBjb21wdXRlZFtrZXldID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9kdWxlIH1cbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBlc01vZHVsZTogZXNNb2R1bGUsXG4gICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplci5qc1xuLy8gbW9kdWxlIGlkID0gMjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"blue merida\"\n  }, [_c('div', {\n    ref: \"board\",\n    staticClass: \"cg-board-wrap\",\n    style: ({\n      width: _vm.size + 'px',\n      height: _vm.size + 'px'\n    })\n  })])\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-498bbca3\", module.exports)\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jaGVzc2JvYXJkL2luZGV4LnZ1ZT9kY2U3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBbUIsYUFBYSwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJibHVlIG1lcmlkYVwiXG4gIH0sIFtfYygnZGl2Jywge1xuICAgIHJlZjogXCJib2FyZFwiLFxuICAgIHN0YXRpY0NsYXNzOiBcImNnLWJvYXJkLXdyYXBcIixcbiAgICBzdHlsZTogKHtcbiAgICAgIHdpZHRoOiBfdm0uc2l6ZSArICdweCcsXG4gICAgICBoZWlnaHQ6IF92bS5zaXplICsgJ3B4J1xuICAgIH0pXG4gIH0pXSlcbn0sc3RhdGljUmVuZGVyRm5zOiBbXX1cbm1vZHVsZS5leHBvcnRzLnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikucmVyZW5kZXIoXCJkYXRhLXYtNDk4YmJjYTNcIiwgbW9kdWxlLmV4cG9ydHMpXG4gIH1cbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIuanM/aWQ9ZGF0YS12LTQ5OGJiY2EzIS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9zcmMvY29tcG9uZW50cy9jaGVzc2JvYXJkL2luZGV4LnZ1ZVxuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n");

/***/ })
/******/ ]);
});